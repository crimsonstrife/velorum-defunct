// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FVector4;
struct FVector;
struct FVector2D;
struct FRotator;
#ifdef PPKLIBRARY_PPKLibraryMath_generated_h
#error "PPKLibraryMath.generated.h already included, missing '#pragma once' in PPKLibraryMath.h"
#endif
#define PPKLIBRARY_PPKLibraryMath_generated_h

#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execMaxFloatArray) \
	{ \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMaxValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MaxValue); \
		P_FINISH; \
		UPPKLibraryMath::MaxFloatArray(Z_Param_Out_FloatArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMaxValue,Z_Param_Out_MaxValue); \
	} \
 \
	DECLARE_FUNCTION(execMinFloatArray) \
	{ \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMinValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MinValue); \
		P_FINISH; \
		UPPKLibraryMath::MinFloatArray(Z_Param_Out_FloatArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMinValue,Z_Param_Out_MinValue); \
	} \
 \
	DECLARE_FUNCTION(execMaxIntegerArray) \
	{ \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMaxValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MaxValue); \
		P_FINISH; \
		UPPKLibraryMath::MaxIntegerArray(Z_Param_Out_IntArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMaxValue,Z_Param_Out_MaxValue); \
	} \
 \
	DECLARE_FUNCTION(execMinIntegerArray) \
	{ \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMinValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MinValue); \
		P_FINISH; \
		UPPKLibraryMath::MinIntegerArray(Z_Param_Out_IntArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMinValue,Z_Param_Out_MinValue); \
	} \
 \
	DECLARE_FUNCTION(execMaxByteArray) \
	{ \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMaxValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MaxValue); \
		P_FINISH; \
		UPPKLibraryMath::MaxByteArray(Z_Param_Out_ByteArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMaxValue,Z_Param_Out_MaxValue); \
	} \
 \
	DECLARE_FUNCTION(execMinByteArray) \
	{ \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMinValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MinValue); \
		P_FINISH; \
		UPPKLibraryMath::MinByteArray(Z_Param_Out_ByteArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMinValue,Z_Param_Out_MinValue); \
	} \
 \
	DECLARE_FUNCTION(execFurtherFloatArray) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatRefValue); \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfFurtherValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_FurtherValue); \
		P_FINISH; \
		UPPKLibraryMath::FurtherFloatArray(Z_Param_FloatRefValue,Z_Param_Out_FloatArray,Z_Param_Out_IndexOfFurtherValue,Z_Param_Out_FurtherValue); \
	} \
 \
	DECLARE_FUNCTION(execCloserFloatArray) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatRefValue); \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_UBOOL(Z_Param_NotEqual); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfCloserValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_CloserValue); \
		P_FINISH; \
		UPPKLibraryMath::CloserFloatArray(Z_Param_FloatRefValue,Z_Param_Out_FloatArray,Z_Param_NotEqual,Z_Param_Out_IndexOfCloserValue,Z_Param_Out_CloserValue); \
	} \
 \
	DECLARE_FUNCTION(execFurtherIntegerArray) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntRefValue); \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfFurtherValue); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_FurtherValue); \
		P_FINISH; \
		UPPKLibraryMath::FurtherIntegerArray(Z_Param_IntRefValue,Z_Param_Out_IntArray,Z_Param_Out_IndexOfFurtherValue,Z_Param_Out_FurtherValue); \
	} \
 \
	DECLARE_FUNCTION(execCloserIntegerArray) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntRefValue); \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_UBOOL(Z_Param_NotEqual); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfCloserValue); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_CloserValue); \
		P_FINISH; \
		UPPKLibraryMath::CloserIntegerArray(Z_Param_IntRefValue,Z_Param_Out_IntArray,Z_Param_NotEqual,Z_Param_Out_IndexOfCloserValue,Z_Param_Out_CloserValue); \
	} \
 \
	DECLARE_FUNCTION(execFurtherByteArray) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ByteRefValue); \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfFurtherValue); \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_FurtherValue); \
		P_FINISH; \
		UPPKLibraryMath::FurtherByteArray(Z_Param_ByteRefValue,Z_Param_Out_ByteArray,Z_Param_Out_IndexOfFurtherValue,Z_Param_Out_FurtherValue); \
	} \
 \
	DECLARE_FUNCTION(execCloserByteArray) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ByteRefValue); \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_UBOOL(Z_Param_NotEqual); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfCloserValue); \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_CloserValue); \
		P_FINISH; \
		UPPKLibraryMath::CloserByteArray(Z_Param_ByteRefValue,Z_Param_Out_ByteArray,Z_Param_NotEqual,Z_Param_Out_IndexOfCloserValue,Z_Param_Out_CloserValue); \
	} \
 \
	DECLARE_FUNCTION(execFGetFurther) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_A); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_B); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FGetFurther(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execFGetCloser) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_A); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_B); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FGetCloser(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execIGetFurther) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UIntProperty,Z_Param_A); \
		P_GET_PROPERTY(UIntProperty,Z_Param_B); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IGetFurther(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execIGetCloser) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UIntProperty,Z_Param_A); \
		P_GET_PROPERTY(UIntProperty,Z_Param_B); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IGetCloser(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBGetFurther) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BGetFurther(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBGetCloser) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BGetCloser(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBMax) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BMax(Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBMin) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BMin(Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execV4MakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FVector4,Z_Param_Vec4Value); \
		P_FINISH; \
		*(FVector4*)Z_Param__Result=UPPKLibraryMath::V4MakeHalfFromFullRot(Z_Param_Vec4Value); \
	} \
 \
	DECLARE_FUNCTION(execV4MakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FVector4,Z_Param_Vec4Value); \
		P_FINISH; \
		*(FVector4*)Z_Param__Result=UPPKLibraryMath::V4MakeFullFromHalfRot(Z_Param_Vec4Value); \
	} \
 \
	DECLARE_FUNCTION(execVMakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_VecValue); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::VMakeHalfFromFullRot(Z_Param_VecValue); \
	} \
 \
	DECLARE_FUNCTION(execVMakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_VecValue); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::VMakeFullFromHalfRot(Z_Param_VecValue); \
	} \
 \
	DECLARE_FUNCTION(execV2DMakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FVector2D,Z_Param_Vec2Value); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UPPKLibraryMath::V2DMakeHalfFromFullRot(Z_Param_Vec2Value); \
	} \
 \
	DECLARE_FUNCTION(execV2DMakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FVector2D,Z_Param_Vec2Value); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UPPKLibraryMath::V2DMakeFullFromHalfRot(Z_Param_Vec2Value); \
	} \
 \
	DECLARE_FUNCTION(execMakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FRotator,Z_Param_RotValue); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=UPPKLibraryMath::MakeHalfFromFullRot(Z_Param_RotValue); \
	} \
 \
	DECLARE_FUNCTION(execMakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FRotator,Z_Param_RotValue); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=UPPKLibraryMath::MakeFullFromHalfRot(Z_Param_RotValue); \
	} \
 \
	DECLARE_FUNCTION(execFMakeHalfFromFullRot) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FMakeHalfFromFullRot(Z_Param_FloatValue); \
	} \
 \
	DECLARE_FUNCTION(execICMakeHalfFromFullRot) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::ICMakeHalfFromFullRot(Z_Param_IntValue); \
	} \
 \
	DECLARE_FUNCTION(execFMakeFullFromHalfRot) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FMakeFullFromHalfRot(Z_Param_FloatValue); \
	} \
 \
	DECLARE_FUNCTION(execIMakeFullFromHalfRot) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IMakeFullFromHalfRot(Z_Param_IntValue); \
	} \
 \
	DECLARE_FUNCTION(execFloatCount) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::FloatCount(Z_Param_FloatValue); \
	} \
 \
	DECLARE_FUNCTION(execIntCount) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IntCount(Z_Param_IntValue); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorRotator) \
	{ \
		P_GET_STRUCT(FRotator,Z_Param_RotValue); \
		P_GET_STRUCT(FVector,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::FullRotSectorRotator(Z_Param_RotValue,Z_Param_SectorsNumber); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorVector) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_VecValue); \
		P_GET_STRUCT(FVector,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::FullRotSectorVector(Z_Param_VecValue,Z_Param_SectorsNumber); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorInt) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_GET_PROPERTY(UIntProperty,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::FullRotSectorInt(Z_Param_FloatValue,Z_Param_SectorsNumber); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorByte) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_GET_PROPERTY(UIntProperty,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::FullRotSectorByte(Z_Param_FloatValue,Z_Param_SectorsNumber); \
	}


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execMaxFloatArray) \
	{ \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMaxValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MaxValue); \
		P_FINISH; \
		UPPKLibraryMath::MaxFloatArray(Z_Param_Out_FloatArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMaxValue,Z_Param_Out_MaxValue); \
	} \
 \
	DECLARE_FUNCTION(execMinFloatArray) \
	{ \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMinValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MinValue); \
		P_FINISH; \
		UPPKLibraryMath::MinFloatArray(Z_Param_Out_FloatArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMinValue,Z_Param_Out_MinValue); \
	} \
 \
	DECLARE_FUNCTION(execMaxIntegerArray) \
	{ \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMaxValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MaxValue); \
		P_FINISH; \
		UPPKLibraryMath::MaxIntegerArray(Z_Param_Out_IntArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMaxValue,Z_Param_Out_MaxValue); \
	} \
 \
	DECLARE_FUNCTION(execMinIntegerArray) \
	{ \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMinValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MinValue); \
		P_FINISH; \
		UPPKLibraryMath::MinIntegerArray(Z_Param_Out_IntArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMinValue,Z_Param_Out_MinValue); \
	} \
 \
	DECLARE_FUNCTION(execMaxByteArray) \
	{ \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMaxValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MaxValue); \
		P_FINISH; \
		UPPKLibraryMath::MaxByteArray(Z_Param_Out_ByteArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMaxValue,Z_Param_Out_MaxValue); \
	} \
 \
	DECLARE_FUNCTION(execMinByteArray) \
	{ \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_PROPERTY(UIntProperty,Z_Param_NumberOfIndexToDiscard); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfMinValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_MinValue); \
		P_FINISH; \
		UPPKLibraryMath::MinByteArray(Z_Param_Out_ByteArray,Z_Param_NumberOfIndexToDiscard,Z_Param_Out_IndexOfMinValue,Z_Param_Out_MinValue); \
	} \
 \
	DECLARE_FUNCTION(execFurtherFloatArray) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatRefValue); \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfFurtherValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_FurtherValue); \
		P_FINISH; \
		UPPKLibraryMath::FurtherFloatArray(Z_Param_FloatRefValue,Z_Param_Out_FloatArray,Z_Param_Out_IndexOfFurtherValue,Z_Param_Out_FurtherValue); \
	} \
 \
	DECLARE_FUNCTION(execCloserFloatArray) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatRefValue); \
		P_GET_TARRAY_REF(float,Z_Param_Out_FloatArray); \
		P_GET_UBOOL(Z_Param_NotEqual); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfCloserValue); \
		P_GET_PROPERTY_REF(UFloatProperty,Z_Param_Out_CloserValue); \
		P_FINISH; \
		UPPKLibraryMath::CloserFloatArray(Z_Param_FloatRefValue,Z_Param_Out_FloatArray,Z_Param_NotEqual,Z_Param_Out_IndexOfCloserValue,Z_Param_Out_CloserValue); \
	} \
 \
	DECLARE_FUNCTION(execFurtherIntegerArray) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntRefValue); \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfFurtherValue); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_FurtherValue); \
		P_FINISH; \
		UPPKLibraryMath::FurtherIntegerArray(Z_Param_IntRefValue,Z_Param_Out_IntArray,Z_Param_Out_IndexOfFurtherValue,Z_Param_Out_FurtherValue); \
	} \
 \
	DECLARE_FUNCTION(execCloserIntegerArray) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntRefValue); \
		P_GET_TARRAY_REF(int32,Z_Param_Out_IntArray); \
		P_GET_UBOOL(Z_Param_NotEqual); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfCloserValue); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_CloserValue); \
		P_FINISH; \
		UPPKLibraryMath::CloserIntegerArray(Z_Param_IntRefValue,Z_Param_Out_IntArray,Z_Param_NotEqual,Z_Param_Out_IndexOfCloserValue,Z_Param_Out_CloserValue); \
	} \
 \
	DECLARE_FUNCTION(execFurtherByteArray) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ByteRefValue); \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfFurtherValue); \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_FurtherValue); \
		P_FINISH; \
		UPPKLibraryMath::FurtherByteArray(Z_Param_ByteRefValue,Z_Param_Out_ByteArray,Z_Param_Out_IndexOfFurtherValue,Z_Param_Out_FurtherValue); \
	} \
 \
	DECLARE_FUNCTION(execCloserByteArray) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ByteRefValue); \
		P_GET_TARRAY_REF(uint8,Z_Param_Out_ByteArray); \
		P_GET_UBOOL(Z_Param_NotEqual); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_IndexOfCloserValue); \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_CloserValue); \
		P_FINISH; \
		UPPKLibraryMath::CloserByteArray(Z_Param_ByteRefValue,Z_Param_Out_ByteArray,Z_Param_NotEqual,Z_Param_Out_IndexOfCloserValue,Z_Param_Out_CloserValue); \
	} \
 \
	DECLARE_FUNCTION(execFGetFurther) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_A); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_B); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FGetFurther(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execFGetCloser) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_A); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_B); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FGetCloser(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execIGetFurther) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UIntProperty,Z_Param_A); \
		P_GET_PROPERTY(UIntProperty,Z_Param_B); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IGetFurther(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execIGetCloser) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UIntProperty,Z_Param_A); \
		P_GET_PROPERTY(UIntProperty,Z_Param_B); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IGetCloser(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBGetFurther) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BGetFurther(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBGetCloser) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Ref); \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BGetCloser(Z_Param_Ref,Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBMax) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BMax(Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execBMin) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_A); \
		P_GET_PROPERTY(UByteProperty,Z_Param_B); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::BMin(Z_Param_A,Z_Param_B); \
	} \
 \
	DECLARE_FUNCTION(execV4MakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FVector4,Z_Param_Vec4Value); \
		P_FINISH; \
		*(FVector4*)Z_Param__Result=UPPKLibraryMath::V4MakeHalfFromFullRot(Z_Param_Vec4Value); \
	} \
 \
	DECLARE_FUNCTION(execV4MakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FVector4,Z_Param_Vec4Value); \
		P_FINISH; \
		*(FVector4*)Z_Param__Result=UPPKLibraryMath::V4MakeFullFromHalfRot(Z_Param_Vec4Value); \
	} \
 \
	DECLARE_FUNCTION(execVMakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_VecValue); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::VMakeHalfFromFullRot(Z_Param_VecValue); \
	} \
 \
	DECLARE_FUNCTION(execVMakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_VecValue); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::VMakeFullFromHalfRot(Z_Param_VecValue); \
	} \
 \
	DECLARE_FUNCTION(execV2DMakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FVector2D,Z_Param_Vec2Value); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UPPKLibraryMath::V2DMakeHalfFromFullRot(Z_Param_Vec2Value); \
	} \
 \
	DECLARE_FUNCTION(execV2DMakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FVector2D,Z_Param_Vec2Value); \
		P_FINISH; \
		*(FVector2D*)Z_Param__Result=UPPKLibraryMath::V2DMakeFullFromHalfRot(Z_Param_Vec2Value); \
	} \
 \
	DECLARE_FUNCTION(execMakeHalfFromFullRot) \
	{ \
		P_GET_STRUCT(FRotator,Z_Param_RotValue); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=UPPKLibraryMath::MakeHalfFromFullRot(Z_Param_RotValue); \
	} \
 \
	DECLARE_FUNCTION(execMakeFullFromHalfRot) \
	{ \
		P_GET_STRUCT(FRotator,Z_Param_RotValue); \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=UPPKLibraryMath::MakeFullFromHalfRot(Z_Param_RotValue); \
	} \
 \
	DECLARE_FUNCTION(execFMakeHalfFromFullRot) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FMakeHalfFromFullRot(Z_Param_FloatValue); \
	} \
 \
	DECLARE_FUNCTION(execICMakeHalfFromFullRot) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::ICMakeHalfFromFullRot(Z_Param_IntValue); \
	} \
 \
	DECLARE_FUNCTION(execFMakeFullFromHalfRot) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryMath::FMakeFullFromHalfRot(Z_Param_FloatValue); \
	} \
 \
	DECLARE_FUNCTION(execIMakeFullFromHalfRot) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IMakeFullFromHalfRot(Z_Param_IntValue); \
	} \
 \
	DECLARE_FUNCTION(execFloatCount) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::FloatCount(Z_Param_FloatValue); \
	} \
 \
	DECLARE_FUNCTION(execIntCount) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_IntValue); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::IntCount(Z_Param_IntValue); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorRotator) \
	{ \
		P_GET_STRUCT(FRotator,Z_Param_RotValue); \
		P_GET_STRUCT(FVector,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::FullRotSectorRotator(Z_Param_RotValue,Z_Param_SectorsNumber); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorVector) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_VecValue); \
		P_GET_STRUCT(FVector,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(FVector*)Z_Param__Result=UPPKLibraryMath::FullRotSectorVector(Z_Param_VecValue,Z_Param_SectorsNumber); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorInt) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_GET_PROPERTY(UIntProperty,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryMath::FullRotSectorInt(Z_Param_FloatValue,Z_Param_SectorsNumber); \
	} \
 \
	DECLARE_FUNCTION(execFullRotSectorByte) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_FloatValue); \
		P_GET_PROPERTY(UIntProperty,Z_Param_SectorsNumber); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryMath::FullRotSectorByte(Z_Param_FloatValue,Z_Param_SectorsNumber); \
	}


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUPPKLibraryMath(); \
	friend PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryMath(); \
	public: \
	DECLARE_CLASS(UPPKLibraryMath, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/PPKLibrary"), NO_API) \
	DECLARE_SERIALIZER(UPPKLibraryMath) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_INCLASS \
	private: \
	static void StaticRegisterNativesUPPKLibraryMath(); \
	friend PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryMath(); \
	public: \
	DECLARE_CLASS(UPPKLibraryMath, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/PPKLibrary"), NO_API) \
	DECLARE_SERIALIZER(UPPKLibraryMath) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UPPKLibraryMath(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UPPKLibraryMath) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UPPKLibraryMath); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UPPKLibraryMath); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UPPKLibraryMath(const UPPKLibraryMath& InCopy); \
public:


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_ENHANCED_CONSTRUCTORS \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UPPKLibraryMath(const UPPKLibraryMath& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UPPKLibraryMath); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UPPKLibraryMath); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UPPKLibraryMath)


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_40_PROLOG
#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_RPC_WRAPPERS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_INCLASS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_RPC_WRAPPERS_NO_PURE_DECLS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_INCLASS_NO_PURE_DECLS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h_42_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryMath_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
