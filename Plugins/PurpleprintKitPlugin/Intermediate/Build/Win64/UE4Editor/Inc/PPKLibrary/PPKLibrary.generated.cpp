// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Core/PPKLibraryPrivatePCH.h"
#include "PPKLibrary.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodePPKLibrary() {}
	void UPPKLibraryMath::StaticRegisterNativesUPPKLibraryMath()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "BGetCloser",(Native)&UPPKLibraryMath::execBGetCloser);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "BGetFurther",(Native)&UPPKLibraryMath::execBGetFurther);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "BMax",(Native)&UPPKLibraryMath::execBMax);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "BMin",(Native)&UPPKLibraryMath::execBMin);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "CloserByteArray",(Native)&UPPKLibraryMath::execCloserByteArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "CloserFloatArray",(Native)&UPPKLibraryMath::execCloserFloatArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "CloserIntegerArray",(Native)&UPPKLibraryMath::execCloserIntegerArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FGetCloser",(Native)&UPPKLibraryMath::execFGetCloser);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FGetFurther",(Native)&UPPKLibraryMath::execFGetFurther);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FloatCount",(Native)&UPPKLibraryMath::execFloatCount);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FMakeFullFromHalfRot",(Native)&UPPKLibraryMath::execFMakeFullFromHalfRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FMakeHalfFromFullRot",(Native)&UPPKLibraryMath::execFMakeHalfFromFullRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FullRotSectorByte",(Native)&UPPKLibraryMath::execFullRotSectorByte);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FullRotSectorInt",(Native)&UPPKLibraryMath::execFullRotSectorInt);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FullRotSectorRotator",(Native)&UPPKLibraryMath::execFullRotSectorRotator);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FullRotSectorVector",(Native)&UPPKLibraryMath::execFullRotSectorVector);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FurtherByteArray",(Native)&UPPKLibraryMath::execFurtherByteArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FurtherFloatArray",(Native)&UPPKLibraryMath::execFurtherFloatArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "FurtherIntegerArray",(Native)&UPPKLibraryMath::execFurtherIntegerArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "ICMakeHalfFromFullRot",(Native)&UPPKLibraryMath::execICMakeHalfFromFullRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "IGetCloser",(Native)&UPPKLibraryMath::execIGetCloser);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "IGetFurther",(Native)&UPPKLibraryMath::execIGetFurther);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "IMakeFullFromHalfRot",(Native)&UPPKLibraryMath::execIMakeFullFromHalfRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "IntCount",(Native)&UPPKLibraryMath::execIntCount);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MakeFullFromHalfRot",(Native)&UPPKLibraryMath::execMakeFullFromHalfRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MakeHalfFromFullRot",(Native)&UPPKLibraryMath::execMakeHalfFromFullRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MaxByteArray",(Native)&UPPKLibraryMath::execMaxByteArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MaxFloatArray",(Native)&UPPKLibraryMath::execMaxFloatArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MaxIntegerArray",(Native)&UPPKLibraryMath::execMaxIntegerArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MinByteArray",(Native)&UPPKLibraryMath::execMinByteArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MinFloatArray",(Native)&UPPKLibraryMath::execMinFloatArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "MinIntegerArray",(Native)&UPPKLibraryMath::execMinIntegerArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "V2DMakeFullFromHalfRot",(Native)&UPPKLibraryMath::execV2DMakeFullFromHalfRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "V2DMakeHalfFromFullRot",(Native)&UPPKLibraryMath::execV2DMakeHalfFromFullRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "V4MakeFullFromHalfRot",(Native)&UPPKLibraryMath::execV4MakeFullFromHalfRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "V4MakeHalfFromFullRot",(Native)&UPPKLibraryMath::execV4MakeHalfFromFullRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "VMakeFullFromHalfRot",(Native)&UPPKLibraryMath::execVMakeFullFromHalfRot);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryMath::StaticClass(), "VMakeHalfFromFullRot",(Native)&UPPKLibraryMath::execVMakeHalfFromFullRot);
	}
	IMPLEMENT_CLASS(UPPKLibraryMath, 291942749);
	void UPPKLibraryRandom::StaticRegisterNativesUPPKLibraryRandom()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "BuildRandom",(Native)&UPPKLibraryRandom::execBuildRandom);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "CreateRandomSeed",(Native)&UPPKLibraryRandom::execCreateRandomSeed);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomBool_Bernoulli",(Native)&UPPKLibraryRandom::execRandomBool_Bernoulli);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomBool_MersenneTwister",(Native)&UPPKLibraryRandom::execRandomBool_MersenneTwister);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomBool_Uniform",(Native)&UPPKLibraryRandom::execRandomBool_Uniform);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomByte_Bernoulli",(Native)&UPPKLibraryRandom::execRandomByte_Bernoulli);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomByte_MersenneTwister",(Native)&UPPKLibraryRandom::execRandomByte_MersenneTwister);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomByte_Uniform",(Native)&UPPKLibraryRandom::execRandomByte_Uniform);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomFloat_Canonical",(Native)&UPPKLibraryRandom::execRandomFloat_Canonical);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomFloat_Uniform",(Native)&UPPKLibraryRandom::execRandomFloat_Uniform);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomInt_Bernoulli",(Native)&UPPKLibraryRandom::execRandomInt_Bernoulli);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomInt_MersenneTwister",(Native)&UPPKLibraryRandom::execRandomInt_MersenneTwister);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomInt_Uniform",(Native)&UPPKLibraryRandom::execRandomInt_Uniform);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomSeedByEntropy",(Native)&UPPKLibraryRandom::execRandomSeedByEntropy);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryRandom::StaticClass(), "RandomSeedByTime",(Native)&UPPKLibraryRandom::execRandomSeedByTime);
	}
	IMPLEMENT_CLASS(UPPKLibraryRandom, 4120554411);
static class UEnum* EINIFilesList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EINIFilesList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EINIFilesList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EINIFilesList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EINIFilesList(EINIFilesList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EINIFilesList"), false, nullptr, nullptr);
	void UPPKLibraryTools::StaticRegisterNativesUPPKLibraryTools()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayBoolToString",(Native)&UPPKLibraryTools::execArrayBoolToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayByteToString",(Native)&UPPKLibraryTools::execArrayByteToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayFloatToString",(Native)&UPPKLibraryTools::execArrayFloatToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayIntegerToString",(Native)&UPPKLibraryTools::execArrayIntegerToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayRotatorToString",(Native)&UPPKLibraryTools::execArrayRotatorToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayVector2DToString",(Native)&UPPKLibraryTools::execArrayVector2DToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayVector4ToString",(Native)&UPPKLibraryTools::execArrayVector4ToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "ArrayVectorToString",(Native)&UPPKLibraryTools::execArrayVectorToString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "DivideFloatIntoIntegers",(Native)&UPPKLibraryTools::execDivideFloatIntoIntegers);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "FloatSplitToVector",(Native)&UPPKLibraryTools::execFloatSplitToVector);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "FloatSplitToVector2D",(Native)&UPPKLibraryTools::execFloatSplitToVector2D);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "FloatSplitToVector4",(Native)&UPPKLibraryTools::execFloatSplitToVector4);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigBool",(Native)&UPPKLibraryTools::execGetConfigBool);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigByte",(Native)&UPPKLibraryTools::execGetConfigByte);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigColor",(Native)&UPPKLibraryTools::execGetConfigColor);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigFloat",(Native)&UPPKLibraryTools::execGetConfigFloat);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigInteger",(Native)&UPPKLibraryTools::execGetConfigInteger);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigRotator",(Native)&UPPKLibraryTools::execGetConfigRotator);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigString",(Native)&UPPKLibraryTools::execGetConfigString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigVector",(Native)&UPPKLibraryTools::execGetConfigVector);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigVector2D",(Native)&UPPKLibraryTools::execGetConfigVector2D);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "GetConfigVector4",(Native)&UPPKLibraryTools::execGetConfigVector4);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "InvertFloat",(Native)&UPPKLibraryTools::execInvertFloat);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "MakeFloatFromIntegers",(Native)&UPPKLibraryTools::execMakeFloatFromIntegers);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintBoolArray",(Native)&UPPKLibraryTools::execPrintBoolArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintByteArray",(Native)&UPPKLibraryTools::execPrintByteArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintFloatArray",(Native)&UPPKLibraryTools::execPrintFloatArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintIntegerArray",(Native)&UPPKLibraryTools::execPrintIntegerArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintRotatorArray",(Native)&UPPKLibraryTools::execPrintRotatorArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintVector2DArray",(Native)&UPPKLibraryTools::execPrintVector2DArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintVector4Array",(Native)&UPPKLibraryTools::execPrintVector4Array);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "PrintVectorArray",(Native)&UPPKLibraryTools::execPrintVectorArray);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "RotatorOrderInvert",(Native)&UPPKLibraryTools::execRotatorOrderInvert);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "RotatorOrderLeft",(Native)&UPPKLibraryTools::execRotatorOrderLeft);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "RotatorOrderRight",(Native)&UPPKLibraryTools::execRotatorOrderRight);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigBool",(Native)&UPPKLibraryTools::execSetConfigBool);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigByte",(Native)&UPPKLibraryTools::execSetConfigByte);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigColor",(Native)&UPPKLibraryTools::execSetConfigColor);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigFloat",(Native)&UPPKLibraryTools::execSetConfigFloat);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigInteger",(Native)&UPPKLibraryTools::execSetConfigInteger);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigRotator",(Native)&UPPKLibraryTools::execSetConfigRotator);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigString",(Native)&UPPKLibraryTools::execSetConfigString);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigVector",(Native)&UPPKLibraryTools::execSetConfigVector);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigVector2D",(Native)&UPPKLibraryTools::execSetConfigVector2D);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "SetConfigVector4",(Native)&UPPKLibraryTools::execSetConfigVector4);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector2DOrderInvert",(Native)&UPPKLibraryTools::execVector2DOrderInvert);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector2DToVector",(Native)&UPPKLibraryTools::execVector2DToVector);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector2DToVector4",(Native)&UPPKLibraryTools::execVector2DToVector4);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector4OrderInvert",(Native)&UPPKLibraryTools::execVector4OrderInvert);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector4OrderLeft",(Native)&UPPKLibraryTools::execVector4OrderLeft);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector4OrderRight",(Native)&UPPKLibraryTools::execVector4OrderRight);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector4ToVector",(Native)&UPPKLibraryTools::execVector4ToVector);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "Vector4ToVector2D",(Native)&UPPKLibraryTools::execVector4ToVector2D);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "VectorOrderInvert",(Native)&UPPKLibraryTools::execVectorOrderInvert);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "VectorOrderLeft",(Native)&UPPKLibraryTools::execVectorOrderLeft);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "VectorOrderRight",(Native)&UPPKLibraryTools::execVectorOrderRight);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "VectorToVector2D",(Native)&UPPKLibraryTools::execVectorToVector2D);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryTools::StaticClass(), "VectorToVector4",(Native)&UPPKLibraryTools::execVectorToVector4);
	}
	IMPLEMENT_CLASS(UPPKLibraryTools, 2903177206);
static class UEnum* EVolUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EVolUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EVolUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EVolUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVolUnitsList(EVolUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EVolUnitsList"), false, nullptr, nullptr);
static class UEnum* ETimeUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ETimeUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_ETimeUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("ETimeUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETimeUnitsList(ETimeUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("ETimeUnitsList"), false, nullptr, nullptr);
static class UEnum* ETempUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ETempUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_ETempUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("ETempUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETempUnitsList(ETempUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("ETempUnitsList"), false, nullptr, nullptr);
static class UEnum* ESpeedUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("ESpeedUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESpeedUnitsList(ESpeedUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("ESpeedUnitsList"), false, nullptr, nullptr);
static class UEnum* EPAUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EPAUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EPAUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EPAUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPAUnitsList(EPAUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EPAUnitsList"), false, nullptr, nullptr);
static class UEnum* EMassUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EMassUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EMassUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EMassUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EMassUnitsList(EMassUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EMassUnitsList"), false, nullptr, nullptr);
static class UEnum* ELengthUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ELengthUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_ELengthUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("ELengthUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELengthUnitsList(ELengthUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("ELengthUnitsList"), false, nullptr, nullptr);
static class UEnum* EFrequencyUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EFrequencyUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EFrequencyUnitsList(EFrequencyUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EFrequencyUnitsList"), false, nullptr, nullptr);
static class UEnum* EDSUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EDSUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EDSUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EDSUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDSUnitsList(EDSUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EDSUnitsList"), false, nullptr, nullptr);
static class UEnum* EDTRUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EDTRUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EDTRUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EDTRUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDTRUnitsList(EDTRUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EDTRUnitsList"), false, nullptr, nullptr);
static class UEnum* EAreaUnitsList_StaticEnum()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EAreaUnitsList();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PPKLibrary_EAreaUnitsList, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("EAreaUnitsList"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAreaUnitsList(EAreaUnitsList_StaticEnum, TEXT("/Script/PPKLibrary"), TEXT("EAreaUnitsList"), false, nullptr, nullptr);
class UScriptStruct* FVolUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVolUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FVolUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FVolUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("VolUnitsStruct"), sizeof(FVolUnitsStruct), Get_Z_Construct_UScriptStruct_FVolUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FVolUnitsStruct(FVolUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("VolUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFVolUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFVolUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("VolUnitsStruct")),new UScriptStruct::TCppStructOps<FVolUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFVolUnitsStruct;
class UScriptStruct* FTimeUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FTimeUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FTimeUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTimeUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("TimeUnitsStruct"), sizeof(FTimeUnitsStruct), Get_Z_Construct_UScriptStruct_FTimeUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTimeUnitsStruct(FTimeUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("TimeUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFTimeUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFTimeUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TimeUnitsStruct")),new UScriptStruct::TCppStructOps<FTimeUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFTimeUnitsStruct;
class UScriptStruct* FTempUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FTempUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FTempUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTempUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("TempUnitsStruct"), sizeof(FTempUnitsStruct), Get_Z_Construct_UScriptStruct_FTempUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTempUnitsStruct(FTempUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("TempUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFTempUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFTempUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TempUnitsStruct")),new UScriptStruct::TCppStructOps<FTempUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFTempUnitsStruct;
class UScriptStruct* FSpeedUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FSpeedUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FSpeedUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSpeedUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("SpeedUnitsStruct"), sizeof(FSpeedUnitsStruct), Get_Z_Construct_UScriptStruct_FSpeedUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSpeedUnitsStruct(FSpeedUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("SpeedUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFSpeedUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFSpeedUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SpeedUnitsStruct")),new UScriptStruct::TCppStructOps<FSpeedUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFSpeedUnitsStruct;
class UScriptStruct* FPAUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FPAUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FPAUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPAUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("PAUnitsStruct"), sizeof(FPAUnitsStruct), Get_Z_Construct_UScriptStruct_FPAUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPAUnitsStruct(FPAUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("PAUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFPAUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFPAUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PAUnitsStruct")),new UScriptStruct::TCppStructOps<FPAUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFPAUnitsStruct;
class UScriptStruct* FMassUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FMassUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FMassUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMassUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("MassUnitsStruct"), sizeof(FMassUnitsStruct), Get_Z_Construct_UScriptStruct_FMassUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMassUnitsStruct(FMassUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("MassUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFMassUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFMassUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MassUnitsStruct")),new UScriptStruct::TCppStructOps<FMassUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFMassUnitsStruct;
class UScriptStruct* FLengthUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FLengthUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FLengthUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLengthUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("LengthUnitsStruct"), sizeof(FLengthUnitsStruct), Get_Z_Construct_UScriptStruct_FLengthUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLengthUnitsStruct(FLengthUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("LengthUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFLengthUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFLengthUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LengthUnitsStruct")),new UScriptStruct::TCppStructOps<FLengthUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFLengthUnitsStruct;
class UScriptStruct* FFrequencyUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FFrequencyUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FFrequencyUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FFrequencyUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("FrequencyUnitsStruct"), sizeof(FFrequencyUnitsStruct), Get_Z_Construct_UScriptStruct_FFrequencyUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FFrequencyUnitsStruct(FFrequencyUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("FrequencyUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFFrequencyUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFFrequencyUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("FrequencyUnitsStruct")),new UScriptStruct::TCppStructOps<FFrequencyUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFFrequencyUnitsStruct;
class UScriptStruct* FDSUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FDSUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FDSUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDSUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("DSUnitsStruct"), sizeof(FDSUnitsStruct), Get_Z_Construct_UScriptStruct_FDSUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDSUnitsStruct(FDSUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("DSUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFDSUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFDSUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DSUnitsStruct")),new UScriptStruct::TCppStructOps<FDSUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFDSUnitsStruct;
class UScriptStruct* FDTRUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FDTRUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FDTRUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDTRUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("DTRUnitsStruct"), sizeof(FDTRUnitsStruct), Get_Z_Construct_UScriptStruct_FDTRUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDTRUnitsStruct(FDTRUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("DTRUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFDTRUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFDTRUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DTRUnitsStruct")),new UScriptStruct::TCppStructOps<FDTRUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFDTRUnitsStruct;
class UScriptStruct* FAreaUnitsStruct::StaticStruct()
{
	extern PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FAreaUnitsStruct();
		extern PPKLIBRARY_API uint32 Get_Z_Construct_UScriptStruct_FAreaUnitsStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAreaUnitsStruct, Z_Construct_UPackage__Script_PPKLibrary(), TEXT("AreaUnitsStruct"), sizeof(FAreaUnitsStruct), Get_Z_Construct_UScriptStruct_FAreaUnitsStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAreaUnitsStruct(FAreaUnitsStruct::StaticStruct, TEXT("/Script/PPKLibrary"), TEXT("AreaUnitsStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PPKLibrary_StaticRegisterNativesFAreaUnitsStruct
{
	FScriptStruct_PPKLibrary_StaticRegisterNativesFAreaUnitsStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AreaUnitsStruct")),new UScriptStruct::TCppStructOps<FAreaUnitsStruct>);
	}
} ScriptStruct_PPKLibrary_StaticRegisterNativesFAreaUnitsStruct;
	void UPPKLibraryUnitConverters::StaticRegisterNativesUPPKLibraryUnitConverters()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "AreaUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execAreaUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "AreaUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execAreaUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "AreaUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execAreaUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "DSUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execDSUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "DSUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execDSUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "DSUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execDSUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "DTRUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execDTRUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "DTRUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execDTRUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "DTRUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execDTRUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "FrequencyUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execFrequencyUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "FrequencyUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execFrequencyUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "FrequencyUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execFrequencyUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "LengthUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execLengthUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "LengthUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execLengthUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "LengthUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execLengthUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "MassUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execMassUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "MassUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execMassUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "MassUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execMassUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "PAUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execPAUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "PAUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execPAUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "PAUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execPAUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "SpeedUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execSpeedUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "SpeedUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execSpeedUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "SpeedUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execSpeedUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "TempUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execTempUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "TempUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execTempUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "TempUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execTempUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "TimeUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execTimeUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "TimeUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execTimeUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "TimeUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execTimeUnitsConverterSimple);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "VolUnitsConverterAdvanced",(Native)&UPPKLibraryUnitConverters::execVolUnitsConverterAdvanced);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "VolUnitsConverterComplete",(Native)&UPPKLibraryUnitConverters::execVolUnitsConverterComplete);
		FNativeFunctionRegistrar::RegisterFunction(UPPKLibraryUnitConverters::StaticClass(), "VolUnitsConverterSimple",(Native)&UPPKLibraryUnitConverters::execVolUnitsConverterSimple);
	}
	IMPLEMENT_CLASS(UPPKLibraryUnitConverters, 890182925);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();

	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_BGetCloser();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_BGetFurther();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_BMax();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_BMin();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_CloserByteArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_CloserFloatArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_CloserIntegerArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FGetCloser();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FGetFurther();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FloatCount();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FMakeFullFromHalfRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FMakeHalfFromFullRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorByte();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorInt();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorRotator();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorVector();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FurtherByteArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FurtherFloatArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_FurtherIntegerArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_ICMakeHalfFromFullRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_IGetCloser();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_IGetFurther();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_IMakeFullFromHalfRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_IntCount();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MakeFullFromHalfRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MakeHalfFromFullRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MaxByteArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MaxFloatArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MaxIntegerArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MinByteArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MinFloatArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_MinIntegerArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_V2DMakeFullFromHalfRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_V2DMakeHalfFromFullRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_V4MakeFullFromHalfRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_V4MakeHalfFromFullRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_VMakeFullFromHalfRot();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryMath_VMakeHalfFromFullRot();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryMath_NoRegister();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryMath();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_BuildRandom();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_CreateRandomSeed();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Bernoulli();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_MersenneTwister();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Uniform();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Bernoulli();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_MersenneTwister();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Uniform();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Canonical();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Uniform();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Bernoulli();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_MersenneTwister();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Uniform();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByEntropy();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByTime();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryRandom_NoRegister();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryRandom();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EINIFilesList();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayBoolToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayByteToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayFloatToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayIntegerToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayRotatorToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayVector2DToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayVector4ToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayVectorToString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_DivideFloatIntoIntegers();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector2D();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector4();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigBool();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigByte();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigColor();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigFloat();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigInteger();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigRotator();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector2D();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector4();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_InvertFloat();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_MakeFloatFromIntegers();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintBoolArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintByteArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintFloatArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintIntegerArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintRotatorArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintVector2DArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintVector4Array();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintVectorArray();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderInvert();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderLeft();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderRight();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigBool();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigByte();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigColor();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigFloat();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigInteger();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigRotator();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigString();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector2D();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector4();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector2DOrderInvert();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector4();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderInvert();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderLeft();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderRight();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector2D();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorOrderInvert();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorOrderLeft();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorOrderRight();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorToVector2D();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorToVector4();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryTools_NoRegister();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryTools();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EVolUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ETimeUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ETempUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EPAUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EMassUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_ELengthUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EDSUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EDTRUnitsList();
	PPKLIBRARY_API class UEnum* Z_Construct_UEnum_PPKLibrary_EAreaUnitsList();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FVolUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FTimeUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FTempUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FSpeedUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FPAUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FMassUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FLengthUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FFrequencyUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FDSUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FDTRUnitsStruct();
	PPKLIBRARY_API class UScriptStruct* Z_Construct_UScriptStruct_FAreaUnitsStruct();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterSimple();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterAdvanced();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterComplete();
	PPKLIBRARY_API class UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterSimple();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryUnitConverters_NoRegister();
	PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryUnitConverters();
	PPKLIBRARY_API class UPackage* Z_Construct_UPackage__Script_PPKLibrary();
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_BGetCloser()
	{
		struct PPKLibraryMath_eventBGetCloser_Parms
		{
			uint8 Ref;
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BGetCloser"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventBGetCloser_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventBGetCloser_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventBGetCloser_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventBGetCloser_Parms), 0x0010000000000080);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryMath_eventBGetCloser_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("CLOS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Closer (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the closer value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_BGetFurther()
	{
		struct PPKLibraryMath_eventBGetFurther_Parms
		{
			uint8 Ref;
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BGetFurther"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventBGetFurther_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventBGetFurther_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventBGetFurther_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventBGetFurther_Parms), 0x0010000000000080);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryMath_eventBGetFurther_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("FURT"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Further (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the further value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_BMax()
	{
		struct PPKLibraryMath_eventBMax_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventBMax_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventBMax_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventBMax_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventBMax_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("MAX"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Max (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the maximum value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_BMin()
	{
		struct PPKLibraryMath_eventBMin_Parms
		{
			uint8 A;
			uint8 B;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventBMin_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventBMin_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventBMin_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventBMin_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("MIN"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Min (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the minimum value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_CloserByteArray()
	{
		struct PPKLibraryMath_eventCloserByteArray_Parms
		{
			uint8 ByteRefValue;
			TArray<uint8> ByteArray;
			bool NotEqual;
			int32 IndexOfCloserValue;
			uint8 CloserValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloserByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventCloserByteArray_Parms));
			UProperty* NewProp_CloserValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CloserValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CloserValue, PPKLibraryMath_eventCloserByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfCloserValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfCloserValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfCloserValue, PPKLibraryMath_eventCloserByteArray_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NotEqual, PPKLibraryMath_eventCloserByteArray_Parms, bool);
			UProperty* NewProp_NotEqual = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NotEqual"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NotEqual, PPKLibraryMath_eventCloserByteArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(NotEqual, PPKLibraryMath_eventCloserByteArray_Parms), sizeof(bool), true);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, PPKLibraryMath_eventCloserByteArray_Parms), 0x0010000008000182);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ByteRefValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteRefValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ByteRefValue, PPKLibraryMath_eventCloserByteArray_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the closer byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_CloserFloatArray()
	{
		struct PPKLibraryMath_eventCloserFloatArray_Parms
		{
			float FloatRefValue;
			TArray<float> FloatArray;
			bool NotEqual;
			int32 IndexOfCloserValue;
			float CloserValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloserFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventCloserFloatArray_Parms));
			UProperty* NewProp_CloserValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CloserValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CloserValue, PPKLibraryMath_eventCloserFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfCloserValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfCloserValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfCloserValue, PPKLibraryMath_eventCloserFloatArray_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NotEqual, PPKLibraryMath_eventCloserFloatArray_Parms, bool);
			UProperty* NewProp_NotEqual = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NotEqual"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NotEqual, PPKLibraryMath_eventCloserFloatArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(NotEqual, PPKLibraryMath_eventCloserFloatArray_Parms), sizeof(bool), true);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, PPKLibraryMath_eventCloserFloatArray_Parms), 0x0010000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_FloatRefValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatRefValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatRefValue, PPKLibraryMath_eventCloserFloatArray_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the closer float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_CloserIntegerArray()
	{
		struct PPKLibraryMath_eventCloserIntegerArray_Parms
		{
			int32 IntRefValue;
			TArray<int32> IntArray;
			bool NotEqual;
			int32 IndexOfCloserValue;
			int32 CloserValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloserIntegerArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventCloserIntegerArray_Parms));
			UProperty* NewProp_CloserValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CloserValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CloserValue, PPKLibraryMath_eventCloserIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfCloserValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfCloserValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfCloserValue, PPKLibraryMath_eventCloserIntegerArray_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NotEqual, PPKLibraryMath_eventCloserIntegerArray_Parms, bool);
			UProperty* NewProp_NotEqual = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NotEqual"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NotEqual, PPKLibraryMath_eventCloserIntegerArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(NotEqual, PPKLibraryMath_eventCloserIntegerArray_Parms), sizeof(bool), true);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, PPKLibraryMath_eventCloserIntegerArray_Parms), 0x0010000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_IntRefValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntRefValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntRefValue, PPKLibraryMath_eventCloserIntegerArray_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the closer integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FGetCloser()
	{
		struct PPKLibraryMath_eventFGetCloser_Parms
		{
			float Ref;
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FGetCloser"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventFGetCloser_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFGetCloser_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventFGetCloser_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventFGetCloser_Parms), 0x0010000000000080);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryMath_eventFGetCloser_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("CLOS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Closer (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the closer value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FGetFurther()
	{
		struct PPKLibraryMath_eventFGetFurther_Parms
		{
			float Ref;
			float A;
			float B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FGetFurther"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventFGetFurther_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFGetFurther_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventFGetFurther_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventFGetFurther_Parms), 0x0010000000000080);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryMath_eventFGetFurther_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("FURT"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Further (float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the further value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FloatCount()
	{
		struct PPKLibraryMath_eventFloatCount_Parms
		{
			float FloatValue;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FloatCount"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventFloatCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFloatCount_Parms), 0x0010000000000580);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryMath_eventFloatCount_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Utils"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Float Size"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of characters in the float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FMakeFullFromHalfRot()
	{
		struct PPKLibraryMath_eventFMakeFullFromHalfRot_Parms
		{
			float FloatValue;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FMakeFullFromHalfRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventFMakeFullFromHalfRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFMakeFullFromHalfRot_Parms), 0x0010000000000580);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryMath_eventFMakeFullFromHalfRot_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("To Full From Half (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the euler like float value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FMakeHalfFromFullRot()
	{
		struct PPKLibraryMath_eventFMakeHalfFromFullRot_Parms
		{
			float FloatValue;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FMakeHalfFromFullRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventFMakeHalfFromFullRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFMakeHalfFromFullRot_Parms), 0x0010000000000580);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryMath_eventFMakeHalfFromFullRot_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("To Half From Full (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the normalize like float value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorByte()
	{
		struct PPKLibraryMath_eventFullRotSectorByte_Parms
		{
			float FloatValue;
			int32 SectorsNumber;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FullRotSectorByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventFullRotSectorByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFullRotSectorByte_Parms), 0x0010000000000580);
			UProperty* NewProp_SectorsNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectorsNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SectorsNumber, PPKLibraryMath_eventFullRotSectorByte_Parms), 0x0010000000000082);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryMath_eventFullRotSectorByte_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the sector index of the float using as reference the number of sectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorInt()
	{
		struct PPKLibraryMath_eventFullRotSectorInt_Parms
		{
			float FloatValue;
			int32 SectorsNumber;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FullRotSectorInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventFullRotSectorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFullRotSectorInt_Parms), 0x0010000000000580);
			UProperty* NewProp_SectorsNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectorsNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SectorsNumber, PPKLibraryMath_eventFullRotSectorInt_Parms), 0x0010000000000082);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryMath_eventFullRotSectorInt_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the sector index of the float using as reference the number of sectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorRotator()
	{
		struct PPKLibraryMath_eventFullRotSectorRotator_Parms
		{
			FRotator RotValue;
			FVector SectorsNumber;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FullRotSectorRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventFullRotSectorRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFullRotSectorRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SectorsNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectorsNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SectorsNumber, PPKLibraryMath_eventFullRotSectorRotator_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryMath_eventFullRotSectorRotator_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the sector index of each FRotator axis using as reference the number of sectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorVector()
	{
		struct PPKLibraryMath_eventFullRotSectorVector_Parms
		{
			FVector VecValue;
			FVector SectorsNumber;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FullRotSectorVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventFullRotSectorVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventFullRotSectorVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SectorsNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectorsNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SectorsNumber, PPKLibraryMath_eventFullRotSectorVector_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryMath_eventFullRotSectorVector_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the sector index of each FVector axis using as reference the number of sectors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FurtherByteArray()
	{
		struct PPKLibraryMath_eventFurtherByteArray_Parms
		{
			uint8 ByteRefValue;
			TArray<uint8> ByteArray;
			int32 IndexOfFurtherValue;
			uint8 FurtherValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FurtherByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventFurtherByteArray_Parms));
			UProperty* NewProp_FurtherValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FurtherValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FurtherValue, PPKLibraryMath_eventFurtherByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfFurtherValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfFurtherValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfFurtherValue, PPKLibraryMath_eventFurtherByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, PPKLibraryMath_eventFurtherByteArray_Parms), 0x0010000008000182);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ByteRefValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteRefValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ByteRefValue, PPKLibraryMath_eventFurtherByteArray_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Byte"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the further byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FurtherFloatArray()
	{
		struct PPKLibraryMath_eventFurtherFloatArray_Parms
		{
			float FloatRefValue;
			TArray<float> FloatArray;
			int32 IndexOfFurtherValue;
			float FurtherValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FurtherFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventFurtherFloatArray_Parms));
			UProperty* NewProp_FurtherValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FurtherValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FurtherValue, PPKLibraryMath_eventFurtherFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfFurtherValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfFurtherValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfFurtherValue, PPKLibraryMath_eventFurtherFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, PPKLibraryMath_eventFurtherFloatArray_Parms), 0x0010000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_FloatRefValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatRefValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatRefValue, PPKLibraryMath_eventFurtherFloatArray_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the further float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_FurtherIntegerArray()
	{
		struct PPKLibraryMath_eventFurtherIntegerArray_Parms
		{
			int32 IntRefValue;
			TArray<int32> IntArray;
			int32 IndexOfFurtherValue;
			int32 FurtherValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FurtherIntegerArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventFurtherIntegerArray_Parms));
			UProperty* NewProp_FurtherValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FurtherValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FurtherValue, PPKLibraryMath_eventFurtherIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfFurtherValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfFurtherValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfFurtherValue, PPKLibraryMath_eventFurtherIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, PPKLibraryMath_eventFurtherIntegerArray_Parms), 0x0010000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_IntRefValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntRefValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntRefValue, PPKLibraryMath_eventFurtherIntegerArray_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the further integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_ICMakeHalfFromFullRot()
	{
		struct PPKLibraryMath_eventICMakeHalfFromFullRot_Parms
		{
			int32 IntValue;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ICMakeHalfFromFullRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventICMakeHalfFromFullRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventICMakeHalfFromFullRot_Parms), 0x0010000000000580);
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, PPKLibraryMath_eventICMakeHalfFromFullRot_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("To Half From Full (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the normalize like int32 value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_IGetCloser()
	{
		struct PPKLibraryMath_eventIGetCloser_Parms
		{
			int32 Ref;
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IGetCloser"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventIGetCloser_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventIGetCloser_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventIGetCloser_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventIGetCloser_Parms), 0x0010000000000080);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryMath_eventIGetCloser_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("CLOS"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Closer (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the closer value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_IGetFurther()
	{
		struct PPKLibraryMath_eventIGetFurther_Parms
		{
			int32 Ref;
			int32 A;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IGetFurther"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryMath_eventIGetFurther_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventIGetFurther_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(B, PPKLibraryMath_eventIGetFurther_Parms), 0x0010000000000080);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, PPKLibraryMath_eventIGetFurther_Parms), 0x0010000000000080);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryMath_eventIGetFurther_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("CommutativeAssociativeBinaryOperator"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("FURT"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Further (int)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the further value of A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_IMakeFullFromHalfRot()
	{
		struct PPKLibraryMath_eventIMakeFullFromHalfRot_Parms
		{
			int32 IntValue;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IMakeFullFromHalfRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventIMakeFullFromHalfRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventIMakeFullFromHalfRot_Parms), 0x0010000000000580);
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, PPKLibraryMath_eventIMakeFullFromHalfRot_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Integer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("To Full From Half (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the euler like int32 value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_IntCount()
	{
		struct PPKLibraryMath_eventIntCount_Parms
		{
			int32 IntValue;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IntCount"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryMath_eventIntCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventIntCount_Parms), 0x0010000000000580);
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, PPKLibraryMath_eventIntCount_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Utils"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Integer Size"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of characters in the int"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MakeFullFromHalfRot()
	{
		struct PPKLibraryMath_eventMakeFullFromHalfRot_Parms
		{
			FRotator RotValue;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeFullFromHalfRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventMakeFullFromHalfRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventMakeFullFromHalfRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryMath_eventMakeFullFromHalfRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 180 To 360 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the euler like FRotator value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MakeHalfFromFullRot()
	{
		struct PPKLibraryMath_eventMakeHalfFromFullRot_Parms
		{
			FRotator RotValue;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeHalfFromFullRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventMakeHalfFromFullRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventMakeHalfFromFullRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryMath_eventMakeHalfFromFullRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 360 To 180 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the normalize like FRotator value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MaxByteArray()
	{
		struct PPKLibraryMath_eventMaxByteArray_Parms
		{
			TArray<uint8> ByteArray;
			int32 NumberOfIndexToDiscard;
			int32 IndexOfMaxValue;
			float MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventMaxByteArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, PPKLibraryMath_eventMaxByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, PPKLibraryMath_eventMaxByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_NumberOfIndexToDiscard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfIndexToDiscard"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfIndexToDiscard, PPKLibraryMath_eventMaxByteArray_Parms), 0x0010000000000082);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, PPKLibraryMath_eventMaxByteArray_Parms), 0x0010000008000182);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the max byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MaxFloatArray()
	{
		struct PPKLibraryMath_eventMaxFloatArray_Parms
		{
			TArray<float> FloatArray;
			int32 NumberOfIndexToDiscard;
			int32 IndexOfMaxValue;
			float MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventMaxFloatArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, PPKLibraryMath_eventMaxFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, PPKLibraryMath_eventMaxFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_NumberOfIndexToDiscard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfIndexToDiscard"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfIndexToDiscard, PPKLibraryMath_eventMaxFloatArray_Parms), 0x0010000000000082);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, PPKLibraryMath_eventMaxFloatArray_Parms), 0x0010000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the max float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MaxIntegerArray()
	{
		struct PPKLibraryMath_eventMaxIntegerArray_Parms
		{
			TArray<int32> IntArray;
			int32 NumberOfIndexToDiscard;
			int32 IndexOfMaxValue;
			float MaxValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaxIntegerArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventMaxIntegerArray_Parms));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, PPKLibraryMath_eventMaxIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMaxValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMaxValue, PPKLibraryMath_eventMaxIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_NumberOfIndexToDiscard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfIndexToDiscard"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfIndexToDiscard, PPKLibraryMath_eventMaxIntegerArray_Parms), 0x0010000000000082);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, PPKLibraryMath_eventMaxIntegerArray_Parms), 0x0010000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the max integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MinByteArray()
	{
		struct PPKLibraryMath_eventMinByteArray_Parms
		{
			TArray<uint8> ByteArray;
			int32 NumberOfIndexToDiscard;
			int32 IndexOfMinValue;
			float MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventMinByteArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinValue, PPKLibraryMath_eventMinByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, PPKLibraryMath_eventMinByteArray_Parms), 0x0010000000000180);
			UProperty* NewProp_NumberOfIndexToDiscard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfIndexToDiscard"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfIndexToDiscard, PPKLibraryMath_eventMinByteArray_Parms), 0x0010000000000082);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, PPKLibraryMath_eventMinByteArray_Parms), 0x0010000008000182);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the min byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MinFloatArray()
	{
		struct PPKLibraryMath_eventMinFloatArray_Parms
		{
			TArray<float> FloatArray;
			int32 NumberOfIndexToDiscard;
			int32 IndexOfMinValue;
			float MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventMinFloatArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinValue, PPKLibraryMath_eventMinFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, PPKLibraryMath_eventMinFloatArray_Parms), 0x0010000000000180);
			UProperty* NewProp_NumberOfIndexToDiscard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfIndexToDiscard"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfIndexToDiscard, PPKLibraryMath_eventMinFloatArray_Parms), 0x0010000000000082);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, PPKLibraryMath_eventMinFloatArray_Parms), 0x0010000008000182);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the min float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_MinIntegerArray()
	{
		struct PPKLibraryMath_eventMinIntegerArray_Parms
		{
			TArray<int32> IntArray;
			int32 NumberOfIndexToDiscard;
			int32 IndexOfMinValue;
			float MinValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MinIntegerArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(PPKLibraryMath_eventMinIntegerArray_Parms));
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinValue, PPKLibraryMath_eventMinIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_IndexOfMinValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexOfMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IndexOfMinValue, PPKLibraryMath_eventMinIntegerArray_Parms), 0x0010000000000180);
			UProperty* NewProp_NumberOfIndexToDiscard = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfIndexToDiscard"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfIndexToDiscard, PPKLibraryMath_eventMinIntegerArray_Parms), 0x0010000000000082);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, PPKLibraryMath_eventMinIntegerArray_Parms), 0x0010000008000182);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the min integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_V2DMakeFullFromHalfRot()
	{
		struct PPKLibraryMath_eventV2DMakeFullFromHalfRot_Parms
		{
			FVector2D Vec2Value;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("V2DMakeFullFromHalfRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventV2DMakeFullFromHalfRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventV2DMakeFullFromHalfRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Vec2Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec2Value, PPKLibraryMath_eventV2DMakeFullFromHalfRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 180 To 360 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the euler like FVector2D value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_V2DMakeHalfFromFullRot()
	{
		struct PPKLibraryMath_eventV2DMakeHalfFromFullRot_Parms
		{
			FVector2D Vec2Value;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("V2DMakeHalfFromFullRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventV2DMakeHalfFromFullRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventV2DMakeHalfFromFullRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Vec2Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec2Value, PPKLibraryMath_eventV2DMakeHalfFromFullRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 360 To 180 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the normalize like FVector2D value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_V4MakeFullFromHalfRot()
	{
		struct PPKLibraryMath_eventV4MakeFullFromHalfRot_Parms
		{
			FVector4 Vec4Value;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("V4MakeFullFromHalfRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventV4MakeFullFromHalfRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventV4MakeFullFromHalfRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryMath_eventV4MakeFullFromHalfRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector4"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 180 To 360 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the euler like FVector4 value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_V4MakeHalfFromFullRot()
	{
		struct PPKLibraryMath_eventV4MakeHalfFromFullRot_Parms
		{
			FVector4 Vec4Value;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("V4MakeHalfFromFullRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventV4MakeHalfFromFullRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventV4MakeHalfFromFullRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryMath_eventV4MakeHalfFromFullRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector4"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 360 To 180 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the normalize like FVector value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_VMakeFullFromHalfRot()
	{
		struct PPKLibraryMath_eventVMakeFullFromHalfRot_Parms
		{
			FVector VecValue;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VMakeFullFromHalfRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventVMakeFullFromHalfRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventVMakeFullFromHalfRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryMath_eventVMakeFullFromHalfRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 180 To 360 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the euler like FVector value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryMath_VMakeHalfFromFullRot()
	{
		struct PPKLibraryMath_eventVMakeHalfFromFullRot_Parms
		{
			FVector VecValue;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryMath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VMakeHalfFromFullRot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryMath_eventVMakeHalfFromFullRot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryMath_eventVMakeHalfFromFullRot_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryMath_eventVMakeHalfFromFullRot_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Convert 360 To 180 Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the normalize like FVector value"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPPKLibraryMath_NoRegister()
	{
		return UPPKLibraryMath::StaticClass();
	}
	UClass* Z_Construct_UClass_UPPKLibraryMath()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_PPKLibrary();
			OuterClass = UPPKLibraryMath::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_BGetCloser());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_BGetFurther());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_BMax());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_BMin());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_CloserByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_CloserFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_CloserIntegerArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FGetCloser());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FGetFurther());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FloatCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FMakeFullFromHalfRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FMakeHalfFromFullRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FurtherByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FurtherFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_FurtherIntegerArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_ICMakeHalfFromFullRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_IGetCloser());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_IGetFurther());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_IMakeFullFromHalfRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_IntCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MakeFullFromHalfRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MakeHalfFromFullRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MaxByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MaxFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MaxIntegerArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MinByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MinFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_MinIntegerArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_V2DMakeFullFromHalfRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_V2DMakeHalfFromFullRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_V4MakeFullFromHalfRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_V4MakeHalfFromFullRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_VMakeFullFromHalfRot());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryMath_VMakeHalfFromFullRot());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_BGetCloser(), "BGetCloser"); // 2665296078
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_BGetFurther(), "BGetFurther"); // 1186440961
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_BMax(), "BMax"); // 2428345418
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_BMin(), "BMin"); // 2898804094
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_CloserByteArray(), "CloserByteArray"); // 390451143
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_CloserFloatArray(), "CloserFloatArray"); // 3895815358
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_CloserIntegerArray(), "CloserIntegerArray"); // 3477473059
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FGetCloser(), "FGetCloser"); // 692226462
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FGetFurther(), "FGetFurther"); // 1139136334
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FloatCount(), "FloatCount"); // 1549944217
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FMakeFullFromHalfRot(), "FMakeFullFromHalfRot"); // 1550296878
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FMakeHalfFromFullRot(), "FMakeHalfFromFullRot"); // 1256497774
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorByte(), "FullRotSectorByte"); // 2049094020
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorInt(), "FullRotSectorInt"); // 3757483960
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorRotator(), "FullRotSectorRotator"); // 2879142414
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FullRotSectorVector(), "FullRotSectorVector"); // 3940042409
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FurtherByteArray(), "FurtherByteArray"); // 3514473868
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FurtherFloatArray(), "FurtherFloatArray"); // 3269665093
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_FurtherIntegerArray(), "FurtherIntegerArray"); // 2487594722
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_ICMakeHalfFromFullRot(), "ICMakeHalfFromFullRot"); // 2847942975
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_IGetCloser(), "IGetCloser"); // 927445469
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_IGetFurther(), "IGetFurther"); // 3682885041
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_IMakeFullFromHalfRot(), "IMakeFullFromHalfRot"); // 1638822007
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_IntCount(), "IntCount"); // 2408186696
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MakeFullFromHalfRot(), "MakeFullFromHalfRot"); // 3511528289
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MakeHalfFromFullRot(), "MakeHalfFromFullRot"); // 547024648
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MaxByteArray(), "MaxByteArray"); // 2682099933
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MaxFloatArray(), "MaxFloatArray"); // 3218244095
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MaxIntegerArray(), "MaxIntegerArray"); // 2513484583
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MinByteArray(), "MinByteArray"); // 3094437483
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MinFloatArray(), "MinFloatArray"); // 1299418909
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_MinIntegerArray(), "MinIntegerArray"); // 382881495
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_V2DMakeFullFromHalfRot(), "V2DMakeFullFromHalfRot"); // 2614540323
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_V2DMakeHalfFromFullRot(), "V2DMakeHalfFromFullRot"); // 3722206531
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_V4MakeFullFromHalfRot(), "V4MakeFullFromHalfRot"); // 3465323282
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_V4MakeHalfFromFullRot(), "V4MakeHalfFromFullRot"); // 3080209567
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_VMakeFullFromHalfRot(), "VMakeFullFromHalfRot"); // 2201252930
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryMath_VMakeHalfFromFullRot(), "VMakeHalfFromFullRot"); // 2346213988
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Core/PPKLibraryMath.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryMath.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPPKLibraryMath(Z_Construct_UClass_UPPKLibraryMath, &UPPKLibraryMath::StaticClass, TEXT("UPPKLibraryMath"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPPKLibraryMath);
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_BuildRandom()
	{
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BuildRandom"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Build the random function seeds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_CreateRandomSeed()
	{
		struct PPKLibraryRandom_eventCreateRandomSeed_Parms
		{
			int32 Seed;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateRandomSeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryRandom_eventCreateRandomSeed_Parms));
			UProperty* NewProp_Seed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Seed"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Seed, PPKLibraryRandom_eventCreateRandomSeed_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Create the random seed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Bernoulli()
	{
		struct PPKLibraryRandom_eventRandomBool_Bernoulli_Parms
		{
			float Bias;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomBool_Bernoulli"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomBool_Bernoulli_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PPKLibraryRandom_eventRandomBool_Bernoulli_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PPKLibraryRandom_eventRandomBool_Bernoulli_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PPKLibraryRandom_eventRandomBool_Bernoulli_Parms), sizeof(bool), true);
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, PPKLibraryRandom_eventRandomBool_Bernoulli_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Bias"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Bool (Bernoulli)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a bool value using the Bernoulli method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_MersenneTwister()
	{
		struct PPKLibraryRandom_eventRandomBool_MersenneTwister_Parms
		{
			float Bias;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomBool_MersenneTwister"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomBool_MersenneTwister_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PPKLibraryRandom_eventRandomBool_MersenneTwister_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PPKLibraryRandom_eventRandomBool_MersenneTwister_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PPKLibraryRandom_eventRandomBool_MersenneTwister_Parms), sizeof(bool), true);
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, PPKLibraryRandom_eventRandomBool_MersenneTwister_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Bias"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Bool (Mersenne Twister)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a bool value using the Bernoulli Twister method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Uniform()
	{
		struct PPKLibraryRandom_eventRandomBool_Uniform_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomBool_Uniform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomBool_Uniform_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PPKLibraryRandom_eventRandomBool_Uniform_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PPKLibraryRandom_eventRandomBool_Uniform_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PPKLibraryRandom_eventRandomBool_Uniform_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Bool (Uniform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a bool value using the Uniform method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Bernoulli()
	{
		struct PPKLibraryRandom_eventRandomByte_Bernoulli_Parms
		{
			float Bias;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomByte_Bernoulli"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomByte_Bernoulli_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomByte_Bernoulli_Parms), 0x0010000000000580);
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, PPKLibraryRandom_eventRandomByte_Bernoulli_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Bias"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Byte (Bernoulli)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a uint8 in the range 0 to 1 value using the Bernoulli method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_MersenneTwister()
	{
		struct PPKLibraryRandom_eventRandomByte_MersenneTwister_Parms
		{
			float Bias;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomByte_MersenneTwister"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomByte_MersenneTwister_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomByte_MersenneTwister_Parms), 0x0010000000000580);
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, PPKLibraryRandom_eventRandomByte_MersenneTwister_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Bias"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Byte (Mersenne Twister)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a uint8 in the range 0 to 1 value using the Bernoulli Twister method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Uniform()
	{
		struct PPKLibraryRandom_eventRandomByte_Uniform_Parms
		{
			uint8 Max;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomByte_Uniform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomByte_Uniform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomByte_Uniform_Parms), 0x0010000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Max, PPKLibraryRandom_eventRandomByte_Uniform_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Byte (Uniform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a uint8 in the range 0 to X value using the Uniform method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Canonical()
	{
		struct PPKLibraryRandom_eventRandomFloat_Canonical_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomFloat_Canonical"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomFloat_Canonical_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomFloat_Canonical_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Float (Canonical)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float in the range 0.0 to 1.0 value using the Canonical method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Uniform()
	{
		struct PPKLibraryRandom_eventRandomFloat_Uniform_Parms
		{
			float Max;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomFloat_Uniform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomFloat_Uniform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomFloat_Uniform_Parms), 0x0010000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Max, PPKLibraryRandom_eventRandomFloat_Uniform_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Float (Uniform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float in the range 0.0 to X.X value using the Uniform method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Bernoulli()
	{
		struct PPKLibraryRandom_eventRandomInt_Bernoulli_Parms
		{
			float Bias;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomInt_Bernoulli"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomInt_Bernoulli_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomInt_Bernoulli_Parms), 0x0010000000000580);
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, PPKLibraryRandom_eventRandomInt_Bernoulli_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Bias"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Integer (Bernoulli)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a int32 in the range 0 to 1 value using the Bernoulli method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_MersenneTwister()
	{
		struct PPKLibraryRandom_eventRandomInt_MersenneTwister_Parms
		{
			float Bias;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomInt_MersenneTwister"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomInt_MersenneTwister_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomInt_MersenneTwister_Parms), 0x0010000000000580);
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, PPKLibraryRandom_eventRandomInt_MersenneTwister_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Bias"), TEXT("0.500000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Integer (Mersenne Twister)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a int32 in the range 0 to 1 value using the Bernoulli Twister method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Uniform()
	{
		struct PPKLibraryRandom_eventRandomInt_Uniform_Parms
		{
			int32 Max;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomInt_Uniform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryRandom_eventRandomInt_Uniform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryRandom_eventRandomInt_Uniform_Parms), 0x0010000000000580);
			UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Max"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Max, PPKLibraryRandom_eventRandomInt_Uniform_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Random Integer (Uniform)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a int32 in the range 0 to X value using the Uniform method"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByEntropy()
	{
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomSeedByEntropy"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update the random seed by entropy"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByTime()
	{
		UObject* Outer=Z_Construct_UClass_UPPKLibraryRandom();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomSeedByTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Random"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update the random seed by time"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPPKLibraryRandom_NoRegister()
	{
		return UPPKLibraryRandom::StaticClass();
	}
	UClass* Z_Construct_UClass_UPPKLibraryRandom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_PPKLibrary();
			OuterClass = UPPKLibraryRandom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_BuildRandom());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_CreateRandomSeed());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Bernoulli());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_MersenneTwister());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Uniform());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Bernoulli());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_MersenneTwister());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Uniform());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Canonical());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Uniform());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Bernoulli());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_MersenneTwister());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Uniform());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByEntropy());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByTime());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_BuildRandom(), "BuildRandom"); // 4131144326
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_CreateRandomSeed(), "CreateRandomSeed"); // 873177037
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Bernoulli(), "RandomBool_Bernoulli"); // 1629042217
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_MersenneTwister(), "RandomBool_MersenneTwister"); // 1674908674
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomBool_Uniform(), "RandomBool_Uniform"); // 1867086933
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Bernoulli(), "RandomByte_Bernoulli"); // 781371730
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_MersenneTwister(), "RandomByte_MersenneTwister"); // 3320074477
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomByte_Uniform(), "RandomByte_Uniform"); // 1732480656
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Canonical(), "RandomFloat_Canonical"); // 3625598880
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomFloat_Uniform(), "RandomFloat_Uniform"); // 2345862136
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Bernoulli(), "RandomInt_Bernoulli"); // 4185732217
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_MersenneTwister(), "RandomInt_MersenneTwister"); // 1255515106
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomInt_Uniform(), "RandomInt_Uniform"); // 1496852483
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByEntropy(), "RandomSeedByEntropy"); // 2209997699
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryRandom_RandomSeedByTime(), "RandomSeedByTime"); // 2719218371
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Core/PPKLibraryRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryRandom.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPPKLibraryRandom(Z_Construct_UClass_UPPKLibraryRandom, &UPPKLibraryRandom::StaticClass, TEXT("UPPKLibraryRandom"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPPKLibraryRandom);
	UEnum* Z_Construct_UEnum_PPKLibrary_EINIFilesList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EINIFilesList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EINIFilesList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EINIFilesList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EINIFilesList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EINIFilesList::GGameIni")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EINIFilesList::GGameUserSettingsIni")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EINIFilesList::GScalabilityIni")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EINIFilesList::GInputIni")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EINIFilesList::GEngineIni")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EINIFilesList::EINIFilesList_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EINIFilesList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("GEngineIni.DisplayName"), TEXT("Engine"));
			MetaData->SetValue(ReturnEnum, TEXT("GGameIni.DisplayName"), TEXT("Game"));
			MetaData->SetValue(ReturnEnum, TEXT("GGameUserSettingsIni.DisplayName"), TEXT("User Settings"));
			MetaData->SetValue(ReturnEnum, TEXT("GInputIni.DisplayName"), TEXT("Input"));
			MetaData->SetValue(ReturnEnum, TEXT("GScalabilityIni.DisplayName"), TEXT("Scalability"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EINIFilesList_CRC() { return 2967591210U; }
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayBoolToString()
	{
		struct PPKLibraryTools_eventArrayBoolToString_Parms
		{
			TArray<bool> BoolArray;
			bool VisualMode;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayBoolToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayBoolToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayBoolToString_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualMode, PPKLibraryTools_eventArrayBoolToString_Parms, bool);
			UProperty* NewProp_VisualMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualMode, PPKLibraryTools_eventArrayBoolToString_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(VisualMode, PPKLibraryTools_eventArrayBoolToString_Parms), sizeof(bool), true);
			UProperty* NewProp_BoolArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoolArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoolArray, PPKLibraryTools_eventArrayBoolToString_Parms), 0x0010000000000082);
			UProperty* NewProp_BoolArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoolArray, TEXT("BoolArray"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, 0, sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the Bool Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayByteToString()
	{
		struct PPKLibraryTools_eventArrayByteToString_Parms
		{
			TArray<uint8> ByteArray;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayByteToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayByteToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayByteToString_Parms), 0x0010000000000580);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, PPKLibraryTools_eventArrayByteToString_Parms), 0x0010000000000082);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the Byte Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayFloatToString()
	{
		struct PPKLibraryTools_eventArrayFloatToString_Parms
		{
			TArray<float> FloatArray;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayFloatToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayFloatToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayFloatToString_Parms), 0x0010000000000580);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, PPKLibraryTools_eventArrayFloatToString_Parms), 0x0010000000000082);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the Float Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayIntegerToString()
	{
		struct PPKLibraryTools_eventArrayIntegerToString_Parms
		{
			TArray<int32> IntArray;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayIntegerToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayIntegerToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayIntegerToString_Parms), 0x0010000000000580);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, PPKLibraryTools_eventArrayIntegerToString_Parms), 0x0010000000000082);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the Integer Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayRotatorToString()
	{
		struct PPKLibraryTools_eventArrayRotatorToString_Parms
		{
			TArray<FRotator> RotArray;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayRotatorToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayRotatorToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayRotatorToString_Parms), 0x0010000000000580);
			UProperty* NewProp_RotArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RotArray, PPKLibraryTools_eventArrayRotatorToString_Parms), 0x0010000000000082);
			UProperty* NewProp_RotArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RotArray, TEXT("RotArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the FRotator Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayVector2DToString()
	{
		struct PPKLibraryTools_eventArrayVector2DToString_Parms
		{
			TArray<FVector2D> Vec2Array;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayVector2DToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayVector2DToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayVector2DToString_Parms), 0x0010000000000580);
			UProperty* NewProp_Vec2Array = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Array"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Vec2Array, PPKLibraryTools_eventArrayVector2DToString_Parms), 0x0010000000000082);
			UProperty* NewProp_Vec2Array_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Vec2Array, TEXT("Vec2Array"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the FVector2D Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayVector4ToString()
	{
		struct PPKLibraryTools_eventArrayVector4ToString_Parms
		{
			TArray<FVector4> Vec4Array;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayVector4ToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayVector4ToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayVector4ToString_Parms), 0x0010000000000580);
			UProperty* NewProp_Vec4Array = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Array"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Vec4Array, PPKLibraryTools_eventArrayVector4ToString_Parms), 0x0010000000000082);
			UProperty* NewProp_Vec4Array_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Vec4Array, TEXT("Vec4Array"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the FVector4 Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_ArrayVectorToString()
	{
		struct PPKLibraryTools_eventArrayVectorToString_Parms
		{
			TArray<FVector> VecArray;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ArrayVectorToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventArrayVectorToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventArrayVectorToString_Parms), 0x0010000000000580);
			UProperty* NewProp_VecArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VecArray, PPKLibraryTools_eventArrayVectorToString_Parms), 0x0010000000000082);
			UProperty* NewProp_VecArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VecArray, TEXT("VecArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FString with all the content in the FVector Array"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_DivideFloatIntoIntegers()
	{
		struct PPKLibraryTools_eventDivideFloatIntoIntegers_Parms
		{
			float Ref;
			int32 B;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DivideFloatIntoIntegers"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryTools_eventDivideFloatIntoIntegers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventDivideFloatIntoIntegers_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(B, PPKLibraryTools_eventDivideFloatIntoIntegers_Parms), 0x0010000000000180);
			UProperty* NewProp_Ref = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Ref"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Ref, PPKLibraryTools_eventDivideFloatIntoIntegers_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Int"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Break Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns split a float into two ints A.B to A and B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector()
	{
		struct PPKLibraryTools_eventFloatSplitToVector_Parms
		{
			float FloatValue;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FloatSplitToVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventFloatSplitToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventFloatSplitToVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryTools_eventFloatSplitToVector_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(A,B,0) from a float A.B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector2D()
	{
		struct PPKLibraryTools_eventFloatSplitToVector2D_Parms
		{
			float FloatValue;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FloatSplitToVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventFloatSplitToVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventFloatSplitToVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryTools_eventFloatSplitToVector2D_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector2D(A,B) from a float A.B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector4()
	{
		struct PPKLibraryTools_eventFloatSplitToVector4_Parms
		{
			float FloatValue;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FloatSplitToVector4"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventFloatSplitToVector4_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventFloatSplitToVector4_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryTools_eventFloatSplitToVector4_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector4(A,B,0,0) from a float A.B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigBool()
	{
		struct PPKLibraryTools_eventGetConfigBool_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventGetConfigBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PPKLibraryTools_eventGetConfigBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PPKLibraryTools_eventGetConfigBool_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PPKLibraryTools_eventGetConfigBool_Parms), sizeof(bool), true);
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigBool_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigBool_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigBool_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected bool from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigByte()
	{
		struct PPKLibraryTools_eventGetConfigByte_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventGetConfigByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigByte_Parms), 0x0010000000000580);
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigByte_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigByte_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigByte_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected uint8 from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigColor()
	{
		struct PPKLibraryTools_eventGetConfigColor_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(PPKLibraryTools_eventGetConfigColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigColor_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigColor_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigColor_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigColor_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected FLinearColor from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigFloat()
	{
		struct PPKLibraryTools_eventGetConfigFloat_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventGetConfigFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigFloat_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigFloat_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigFloat_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected float from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigInteger()
	{
		struct PPKLibraryTools_eventGetConfigInteger_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigInteger"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventGetConfigInteger_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigInteger_Parms), 0x0010000000000580);
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigInteger_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigInteger_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigInteger_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected int32 from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigRotator()
	{
		struct PPKLibraryTools_eventGetConfigRotator_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(PPKLibraryTools_eventGetConfigRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigRotator_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigRotator_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigRotator_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected FRotator from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigString()
	{
		struct PPKLibraryTools_eventGetConfigString_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PPKLibraryTools_eventGetConfigString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigString_Parms), 0x0010000000000580);
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigString_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigString_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigString_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected FString from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector()
	{
		struct PPKLibraryTools_eventGetConfigVector_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(PPKLibraryTools_eventGetConfigVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigVector_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigVector_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigVector_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected FVector from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector2D()
	{
		struct PPKLibraryTools_eventGetConfigVector2D_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(PPKLibraryTools_eventGetConfigVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigVector2D_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigVector2D_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigVector2D_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected FVector2D from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector4()
	{
		struct PPKLibraryTools_eventGetConfigVector4_Parms
		{
			FString SectionName;
			FString VariableName;
			TEnumAsByte<EINIFilesList> INIFile;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetConfigVector4"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(PPKLibraryTools_eventGetConfigVector4_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventGetConfigVector4_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventGetConfigVector4_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventGetConfigVector4_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventGetConfigVector4_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the value of the selected FVector from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_InvertFloat()
	{
		struct PPKLibraryTools_eventInvertFloat_Parms
		{
			float FloatValue;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvertFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventInvertFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventInvertFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryTools_eventInvertFloat_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Invert Float Order"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the float inverted A.B to B.A"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_MakeFloatFromIntegers()
	{
		struct PPKLibraryTools_eventMakeFloatFromIntegers_Parms
		{
			int32 A;
			int32 B;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeFloatFromIntegers"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventMakeFloatFromIntegers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventMakeFloatFromIntegers_Parms), 0x0010000000000580);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(B, PPKLibraryTools_eventMakeFloatFromIntegers_Parms), 0x0010000000000082);
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(A, PPKLibraryTools_eventMakeFloatFromIntegers_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Float"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Make Float"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float from two ints A and B to A.B"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintBoolArray()
	{
		struct PPKLibraryTools_eventPrintBoolArray_Parms
		{
			TArray<bool> BoolArray;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
			bool VisualMode;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintBoolArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintBoolArray_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VisualMode, PPKLibraryTools_eventPrintBoolArray_Parms, bool);
			UProperty* NewProp_VisualMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VisualMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VisualMode, PPKLibraryTools_eventPrintBoolArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(VisualMode, PPKLibraryTools_eventPrintBoolArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintBoolArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintBoolArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintBoolArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintBoolArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintBoolArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintBoolArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintBoolArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintBoolArray_Parms), sizeof(bool), true);
			UProperty* NewProp_BoolArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoolArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoolArray, PPKLibraryTools_eventPrintBoolArray_Parms), 0x0010000000000082);
			UProperty* NewProp_BoolArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoolArray, TEXT("BoolArray"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, 0, sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aBool: "));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VisualMode"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole bool array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintByteArray()
	{
		struct PPKLibraryTools_eventPrintByteArray_Parms
		{
			TArray<uint8> ByteArray;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintByteArray_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintByteArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintByteArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintByteArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintByteArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintByteArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintByteArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintByteArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintByteArray_Parms), sizeof(bool), true);
			UProperty* NewProp_ByteArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ByteArray, PPKLibraryTools_eventPrintByteArray_Parms), 0x0010000000000082);
			UProperty* NewProp_ByteArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ByteArray, TEXT("ByteArray"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aByte: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole uint8 / Byte array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintFloatArray()
	{
		struct PPKLibraryTools_eventPrintFloatArray_Parms
		{
			TArray<float> FloatArray;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintFloatArray_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintFloatArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintFloatArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintFloatArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintFloatArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintFloatArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintFloatArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintFloatArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintFloatArray_Parms), sizeof(bool), true);
			UProperty* NewProp_FloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatArray, PPKLibraryTools_eventPrintFloatArray_Parms), 0x0010000000000082);
			UProperty* NewProp_FloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatArray, TEXT("FloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aFloat: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole float array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintIntegerArray()
	{
		struct PPKLibraryTools_eventPrintIntegerArray_Parms
		{
			TArray<int32> IntArray;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintIntegerArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintIntegerArray_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintIntegerArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintIntegerArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintIntegerArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintIntegerArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintIntegerArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintIntegerArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintIntegerArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintIntegerArray_Parms), sizeof(bool), true);
			UProperty* NewProp_IntArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IntArray, PPKLibraryTools_eventPrintIntegerArray_Parms), 0x0010000000000082);
			UProperty* NewProp_IntArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IntArray, TEXT("IntArray"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aInt: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole int32 / int array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintRotatorArray()
	{
		struct PPKLibraryTools_eventPrintRotatorArray_Parms
		{
			TArray<FRotator> RotArray;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintRotatorArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintRotatorArray_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintRotatorArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintRotatorArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintRotatorArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintRotatorArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintRotatorArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintRotatorArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintRotatorArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintRotatorArray_Parms), sizeof(bool), true);
			UProperty* NewProp_RotArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RotArray, PPKLibraryTools_eventPrintRotatorArray_Parms), 0x0010000000000082);
			UProperty* NewProp_RotArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RotArray, TEXT("RotArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aRot: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole FRotator array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintVector2DArray()
	{
		struct PPKLibraryTools_eventPrintVector2DArray_Parms
		{
			TArray<FVector2D> Vec2Array;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintVector2DArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintVector2DArray_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintVector2DArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintVector2DArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintVector2DArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintVector2DArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintVector2DArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintVector2DArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintVector2DArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintVector2DArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Vec2Array = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Array"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Vec2Array, PPKLibraryTools_eventPrintVector2DArray_Parms), 0x0010000000000082);
			UProperty* NewProp_Vec2Array_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Vec2Array, TEXT("Vec2Array"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aVec2D: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole FVector2D array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintVector4Array()
	{
		struct PPKLibraryTools_eventPrintVector4Array_Parms
		{
			TArray<FVector4> Vec4Array;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintVector4Array"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintVector4Array_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintVector4Array_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintVector4Array_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintVector4Array_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintVector4Array_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintVector4Array_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintVector4Array_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintVector4Array_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintVector4Array_Parms), sizeof(bool), true);
			UProperty* NewProp_Vec4Array = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Array"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Vec4Array, PPKLibraryTools_eventPrintVector4Array_Parms), 0x0010000000000082);
			UProperty* NewProp_Vec4Array_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Vec4Array, TEXT("Vec4Array"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aVec4: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole FVector4 array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_PrintVectorArray()
	{
		struct PPKLibraryTools_eventPrintVectorArray_Parms
		{
			TArray<FVector> VecArray;
			bool SingleString;
			FString Text;
			bool NoText;
			float Duration;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintVectorArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventPrintVectorArray_Parms));
			UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, PPKLibraryTools_eventPrintVectorArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NoText, PPKLibraryTools_eventPrintVectorArray_Parms, bool);
			UProperty* NewProp_NoText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NoText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NoText, PPKLibraryTools_eventPrintVectorArray_Parms), 0x0010040000000082, CPP_BOOL_PROPERTY_BITMASK(NoText, PPKLibraryTools_eventPrintVectorArray_Parms), sizeof(bool), true);
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, PPKLibraryTools_eventPrintVectorArray_Parms), 0x0010040000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SingleString, PPKLibraryTools_eventPrintVectorArray_Parms, bool);
			UProperty* NewProp_SingleString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SingleString"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SingleString, PPKLibraryTools_eventPrintVectorArray_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(SingleString, PPKLibraryTools_eventPrintVectorArray_Parms), sizeof(bool), true);
			UProperty* NewProp_VecArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VecArray, PPKLibraryTools_eventPrintVectorArray_Parms), 0x0010000000000082);
			UProperty* NewProp_VecArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VecArray, TEXT("VecArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Tools|Print"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Duration"), TEXT("2.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NoText"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SingleString"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Text"), TEXT("aVec: "));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Print the whole FVector array in the screen"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderInvert()
	{
		struct PPKLibraryTools_eventRotatorOrderInvert_Parms
		{
			FRotator RotValue;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotatorOrderInvert"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventRotatorOrderInvert_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventRotatorOrderInvert_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryTools_eventRotatorOrderInvert_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FRotator(C,B,A) from the FRotator(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderLeft()
	{
		struct PPKLibraryTools_eventRotatorOrderLeft_Parms
		{
			FRotator RotValue;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotatorOrderLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventRotatorOrderLeft_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventRotatorOrderLeft_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryTools_eventRotatorOrderLeft_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FRotator(B,C,A) from the FRotator(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderRight()
	{
		struct PPKLibraryTools_eventRotatorOrderRight_Parms
		{
			FRotator RotValue;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RotatorOrderRight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventRotatorOrderRight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventRotatorOrderRight_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryTools_eventRotatorOrderRight_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Rotator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FRotator(C,A,B) from the FRotator(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigBool()
	{
		struct PPKLibraryTools_eventSetConfigBool_Parms
		{
			FString SectionName;
			FString VariableName;
			bool BoolValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventSetConfigBool_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigBool_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(BoolValue, PPKLibraryTools_eventSetConfigBool_Parms, bool);
			UProperty* NewProp_BoolValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoolValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BoolValue, PPKLibraryTools_eventSetConfigBool_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(BoolValue, PPKLibraryTools_eventSetConfigBool_Parms), sizeof(bool), true);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigBool_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigBool_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected bool from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigByte()
	{
		struct PPKLibraryTools_eventSetConfigByte_Parms
		{
			FString SectionName;
			FString VariableName;
			uint8 ByteValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventSetConfigByte_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigByte_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_ByteValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ByteValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ByteValue, PPKLibraryTools_eventSetConfigByte_Parms), 0x0010000000000082);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigByte_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigByte_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected uint8 from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigColor()
	{
		struct PPKLibraryTools_eventSetConfigColor_Parms
		{
			FString SectionName;
			FString VariableName;
			FLinearColor ColorValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventSetConfigColor_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigColor_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_ColorValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ColorValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorValue, PPKLibraryTools_eventSetConfigColor_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigColor_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigColor_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected FLinearColor from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigFloat()
	{
		struct PPKLibraryTools_eventSetConfigFloat_Parms
		{
			FString SectionName;
			FString VariableName;
			float FloatValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventSetConfigFloat_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigFloat_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, PPKLibraryTools_eventSetConfigFloat_Parms), 0x0010000000000082);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigFloat_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigFloat_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected float from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigInteger()
	{
		struct PPKLibraryTools_eventSetConfigInteger_Parms
		{
			FString SectionName;
			FString VariableName;
			int32 IntValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigInteger"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventSetConfigInteger_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigInteger_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, PPKLibraryTools_eventSetConfigInteger_Parms), 0x0010000000000082);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigInteger_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigInteger_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected int32 from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigRotator()
	{
		struct PPKLibraryTools_eventSetConfigRotator_Parms
		{
			FString SectionName;
			FString VariableName;
			FRotator RotValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventSetConfigRotator_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigRotator_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_RotValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotValue, PPKLibraryTools_eventSetConfigRotator_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigRotator_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigRotator_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected FRotator from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigString()
	{
		struct PPKLibraryTools_eventSetConfigString_Parms
		{
			FString SectionName;
			FString VariableName;
			FString StrValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryTools_eventSetConfigString_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigString_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_StrValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StrValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StrValue, PPKLibraryTools_eventSetConfigString_Parms), 0x0010000000000082);
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigString_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigString_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected FString from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector()
	{
		struct PPKLibraryTools_eventSetConfigVector_Parms
		{
			FString SectionName;
			FString VariableName;
			FVector VecValue;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventSetConfigVector_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigVector_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryTools_eventSetConfigVector_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigVector_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigVector_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected FVector from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector2D()
	{
		struct PPKLibraryTools_eventSetConfigVector2D_Parms
		{
			FString SectionName;
			FString VariableName;
			FVector2D Vec2Value;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventSetConfigVector2D_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigVector2D_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_Vec2Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec2Value, PPKLibraryTools_eventSetConfigVector2D_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigVector2D_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigVector2D_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected FVector2D from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector4()
	{
		struct PPKLibraryTools_eventSetConfigVector4_Parms
		{
			FString SectionName;
			FString VariableName;
			FVector4 Vec4Value;
			TEnumAsByte<EINIFilesList> INIFile;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigVector4"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(PPKLibraryTools_eventSetConfigVector4_Parms));
			UProperty* NewProp_INIFile = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("INIFile"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(INIFile, PPKLibraryTools_eventSetConfigVector4_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EINIFilesList());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryTools_eventSetConfigVector4_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VariableName, PPKLibraryTools_eventSetConfigVector4_Parms), 0x0010000000000082);
			UProperty* NewProp_SectionName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SectionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SectionName, PPKLibraryTools_eventSetConfigVector4_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Config"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the selected FVector from the selected ini config file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector2DOrderInvert()
	{
		struct PPKLibraryTools_eventVector2DOrderInvert_Parms
		{
			FVector2D Vec2Value;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DOrderInvert"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVector2DOrderInvert_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector2DOrderInvert_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Vec2Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec2Value, PPKLibraryTools_eventVector2DOrderInvert_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector2D(B,A) from the FVector2D(A,B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector()
	{
		struct PPKLibraryTools_eventVector2DToVector_Parms
		{
			FVector2D Vec2Value;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DToVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PPKLibraryTools_eventVector2DToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector2DToVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Vec2Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec2Value, PPKLibraryTools_eventVector2DToVector_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(A,B,0) from the FVector2D(A,B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector4()
	{
		struct PPKLibraryTools_eventVector2DToVector4_Parms
		{
			FVector2D Vec2Value;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2DToVector4"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PPKLibraryTools_eventVector2DToVector4_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector2DToVector4_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_Vec2Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec2Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec2Value, PPKLibraryTools_eventVector2DToVector4_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector4(A,B,0,0) from the FVector2D(A,B)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderInvert()
	{
		struct PPKLibraryTools_eventVector4OrderInvert_Parms
		{
			FVector4 Vec4Value;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector4OrderInvert"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVector4OrderInvert_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector4OrderInvert_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryTools_eventVector4OrderInvert_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector4"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector4(D,C,B,A) from the FVector4(A,B,C,D)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderLeft()
	{
		struct PPKLibraryTools_eventVector4OrderLeft_Parms
		{
			FVector4 Vec4Value;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector4OrderLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVector4OrderLeft_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector4OrderLeft_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryTools_eventVector4OrderLeft_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(B,C,D,A) from the FVector(A,B,C,D)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderRight()
	{
		struct PPKLibraryTools_eventVector4OrderRight_Parms
		{
			FVector4 Vec4Value;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector4OrderRight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVector4OrderRight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector4OrderRight_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryTools_eventVector4OrderRight_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(D,A,B,C) from the FVector(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector()
	{
		struct PPKLibraryTools_eventVector4ToVector_Parms
		{
			FVector4 Vec4Value;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector4ToVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PPKLibraryTools_eventVector4ToVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector4ToVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryTools_eventVector4ToVector_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(A,B,C) from the FVector4(A,B,C,D)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector2D()
	{
		struct PPKLibraryTools_eventVector4ToVector2D_Parms
		{
			FVector4 Vec4Value;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector4ToVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PPKLibraryTools_eventVector4ToVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVector4ToVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Vec4Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vec4Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Vec4Value, PPKLibraryTools_eventVector4ToVector2D_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector2D(A,B) from the FVector4(A,B,C,D)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorOrderInvert()
	{
		struct PPKLibraryTools_eventVectorOrderInvert_Parms
		{
			FVector VecValue;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorOrderInvert"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVectorOrderInvert_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVectorOrderInvert_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryTools_eventVectorOrderInvert_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(C,B,A) from the FVector(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorOrderLeft()
	{
		struct PPKLibraryTools_eventVectorOrderLeft_Parms
		{
			FVector VecValue;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorOrderLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVectorOrderLeft_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVectorOrderLeft_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryTools_eventVectorOrderLeft_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(B,C,A) from the FVector(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorOrderRight()
	{
		struct PPKLibraryTools_eventVectorOrderRight_Parms
		{
			FVector VecValue;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorOrderRight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(PPKLibraryTools_eventVectorOrderRight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVectorOrderRight_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryTools_eventVectorOrderRight_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector(C,A,B) from the FVector(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorToVector2D()
	{
		struct PPKLibraryTools_eventVectorToVector2D_Parms
		{
			FVector VecValue;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorToVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PPKLibraryTools_eventVectorToVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVectorToVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryTools_eventVectorToVector2D_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector2D(A,B) from the FVector(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryTools_VectorToVector4()
	{
		struct PPKLibraryTools_eventVectorToVector4_Parms
		{
			FVector VecValue;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryTools();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorToVector4"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PPKLibraryTools_eventVectorToVector4_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryTools_eventVectorToVector4_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_VecValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VecValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VecValue, PPKLibraryTools_eventVectorToVector4_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Math|Vector"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns FVector4(A,B,C,0) from the FVector(A,B,C)"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPPKLibraryTools_NoRegister()
	{
		return UPPKLibraryTools::StaticClass();
	}
	UClass* Z_Construct_UClass_UPPKLibraryTools()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_PPKLibrary();
			OuterClass = UPPKLibraryTools::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayBoolToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayByteToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayFloatToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayIntegerToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayRotatorToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayVector2DToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayVector4ToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_ArrayVectorToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_DivideFloatIntoIntegers());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector4());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigInteger());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector4());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_InvertFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_MakeFloatFromIntegers());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintBoolArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintByteArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintFloatArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintIntegerArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintRotatorArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintVector2DArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintVector4Array());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_PrintVectorArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderInvert());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderLeft());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderRight());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigByte());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigInteger());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigString());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector4());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector2DOrderInvert());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector4());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderInvert());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderLeft());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderRight());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_VectorOrderInvert());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_VectorOrderLeft());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_VectorOrderRight());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_VectorToVector2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryTools_VectorToVector4());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayBoolToString(), "ArrayBoolToString"); // 2019381064
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayByteToString(), "ArrayByteToString"); // 2866871596
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayFloatToString(), "ArrayFloatToString"); // 4015360552
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayIntegerToString(), "ArrayIntegerToString"); // 1071843959
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayRotatorToString(), "ArrayRotatorToString"); // 3940621540
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayVector2DToString(), "ArrayVector2DToString"); // 3423012746
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayVector4ToString(), "ArrayVector4ToString"); // 1181360242
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_ArrayVectorToString(), "ArrayVectorToString"); // 1862326472
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_DivideFloatIntoIntegers(), "DivideFloatIntoIntegers"); // 1597998588
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector(), "FloatSplitToVector"); // 2597850574
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector2D(), "FloatSplitToVector2D"); // 1712111614
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_FloatSplitToVector4(), "FloatSplitToVector4"); // 1010906612
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigBool(), "GetConfigBool"); // 815328526
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigByte(), "GetConfigByte"); // 3769832328
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigColor(), "GetConfigColor"); // 2674903951
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigFloat(), "GetConfigFloat"); // 3952180734
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigInteger(), "GetConfigInteger"); // 137198224
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigRotator(), "GetConfigRotator"); // 1007804680
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigString(), "GetConfigString"); // 1029759862
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector(), "GetConfigVector"); // 3906171515
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector2D(), "GetConfigVector2D"); // 2159411772
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_GetConfigVector4(), "GetConfigVector4"); // 2801296385
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_InvertFloat(), "InvertFloat"); // 2667979749
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_MakeFloatFromIntegers(), "MakeFloatFromIntegers"); // 2296865204
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintBoolArray(), "PrintBoolArray"); // 1674231844
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintByteArray(), "PrintByteArray"); // 3507314337
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintFloatArray(), "PrintFloatArray"); // 1831609800
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintIntegerArray(), "PrintIntegerArray"); // 903301663
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintRotatorArray(), "PrintRotatorArray"); // 110173630
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintVector2DArray(), "PrintVector2DArray"); // 122952511
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintVector4Array(), "PrintVector4Array"); // 1609346874
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_PrintVectorArray(), "PrintVectorArray"); // 2091732492
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderInvert(), "RotatorOrderInvert"); // 784536981
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderLeft(), "RotatorOrderLeft"); // 861797684
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_RotatorOrderRight(), "RotatorOrderRight"); // 4086875626
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigBool(), "SetConfigBool"); // 943161031
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigByte(), "SetConfigByte"); // 1356057996
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigColor(), "SetConfigColor"); // 3409325719
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigFloat(), "SetConfigFloat"); // 2216188299
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigInteger(), "SetConfigInteger"); // 231809890
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigRotator(), "SetConfigRotator"); // 836285004
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigString(), "SetConfigString"); // 1444911707
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector(), "SetConfigVector"); // 2536035042
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector2D(), "SetConfigVector2D"); // 59873369
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_SetConfigVector4(), "SetConfigVector4"); // 1315448283
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector2DOrderInvert(), "Vector2DOrderInvert"); // 3304364625
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector(), "Vector2DToVector"); // 1191683718
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector2DToVector4(), "Vector2DToVector4"); // 3373773005
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderInvert(), "Vector4OrderInvert"); // 2315974579
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderLeft(), "Vector4OrderLeft"); // 1941285339
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector4OrderRight(), "Vector4OrderRight"); // 3382790081
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector(), "Vector4ToVector"); // 2860693212
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_Vector4ToVector2D(), "Vector4ToVector2D"); // 4171753717
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_VectorOrderInvert(), "VectorOrderInvert"); // 935880608
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_VectorOrderLeft(), "VectorOrderLeft"); // 3082145119
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_VectorOrderRight(), "VectorOrderRight"); // 2008263738
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_VectorToVector2D(), "VectorToVector2D"); // 3343880985
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryTools_VectorToVector4(), "VectorToVector4"); // 2088211469
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Core/PPKLibraryTools.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryTools.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPPKLibraryTools(Z_Construct_UClass_UPPKLibraryTools, &UPPKLibraryTools::StaticClass, TEXT("UPPKLibraryTools"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPPKLibraryTools);
	UEnum* Z_Construct_UEnum_PPKLibrary_EVolUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EVolUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVolUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EVolUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVolUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSLiquidGallon")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSLiquidQuart")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSLiquidPint")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSLegalCup")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSFluidOunce")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSTablespoon")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUUSTeaspoon")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUCubicMetre")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VULitre")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUMillilitre")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialGallon")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialQuart")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialPint")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialCup")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialFluidOunce")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialTablespoon")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUImperialTeaspoon")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUCubicFoot")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::VUCubicInch")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVolUnitsList::EVolUnitsList_MAX")), 19));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EVolUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VUCubicFoot.DisplayName"), TEXT("() Cubic Foot"));
			MetaData->SetValue(ReturnEnum, TEXT("VUCubicInch.DisplayName"), TEXT("() Cubic Inch"));
			MetaData->SetValue(ReturnEnum, TEXT("VUCubicMetre.DisplayName"), TEXT("() Cubic Metre"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialCup.DisplayName"), TEXT("() Imperial Cup"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialFluidOunce.DisplayName"), TEXT("() Imperial Fluid Ounce"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialGallon.DisplayName"), TEXT("() Imperial Gallon"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialPint.DisplayName"), TEXT("() Imperial Pint"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialQuart.DisplayName"), TEXT("() Imperial Quart"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialTablespoon.DisplayName"), TEXT("() Imperial Tablespoon"));
			MetaData->SetValue(ReturnEnum, TEXT("VUImperialTeaspoon.DisplayName"), TEXT("() Imperial Teaspoon"));
			MetaData->SetValue(ReturnEnum, TEXT("VULitre.DisplayName"), TEXT("() Litre"));
			MetaData->SetValue(ReturnEnum, TEXT("VUMillilitre.DisplayName"), TEXT("() Millilitre"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSFluidOunce.DisplayName"), TEXT("() US Fluid Ounce"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSLegalCup.DisplayName"), TEXT("() US Legal Cup"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSLiquidGallon.DisplayName"), TEXT("() US Liquid Gallon"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSLiquidGallon.ToolTip"), TEXT("Volume"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSLiquidPint.DisplayName"), TEXT("() US Liquid Pint"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSLiquidQuart.DisplayName"), TEXT("() US Liquid Quart"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSTablespoon.DisplayName"), TEXT("() US Tablespoon"));
			MetaData->SetValue(ReturnEnum, TEXT("VUUSTeaspoon.DisplayName"), TEXT("() US Teaspoon"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EVolUnitsList_CRC() { return 459804431U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_ETimeUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_ETimeUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETimeUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_ETimeUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETimeUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUNanosecond")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUMicrosecond")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUMillisecond")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUSecond")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUMinute")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUHour")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUDay")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUWeek")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUMonth")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUYear")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUDecade")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::TUCentury")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETimeUnitsList::ETimeUnitsList_MAX")), 12));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ETimeUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TUCentury.DisplayName"), TEXT("(C) Century"));
			MetaData->SetValue(ReturnEnum, TEXT("TUDay.DisplayName"), TEXT("(d) Day"));
			MetaData->SetValue(ReturnEnum, TEXT("TUDecade.DisplayName"), TEXT("(D) Decade"));
			MetaData->SetValue(ReturnEnum, TEXT("TUHour.DisplayName"), TEXT("(H) Hour"));
			MetaData->SetValue(ReturnEnum, TEXT("TUMicrosecond.DisplayName"), TEXT("(Micro) Microsecond"));
			MetaData->SetValue(ReturnEnum, TEXT("TUMillisecond.DisplayName"), TEXT("(Milli) Millisecond"));
			MetaData->SetValue(ReturnEnum, TEXT("TUMinute.DisplayName"), TEXT("(m) Minute"));
			MetaData->SetValue(ReturnEnum, TEXT("TUMonth.DisplayName"), TEXT("(M) Month"));
			MetaData->SetValue(ReturnEnum, TEXT("TUNanosecond.DisplayName"), TEXT("(Nano) Nanosecond"));
			MetaData->SetValue(ReturnEnum, TEXT("TUNanosecond.ToolTip"), TEXT("Time"));
			MetaData->SetValue(ReturnEnum, TEXT("TUSecond.DisplayName"), TEXT("(s) Second"));
			MetaData->SetValue(ReturnEnum, TEXT("TUWeek.DisplayName"), TEXT("(W) Week"));
			MetaData->SetValue(ReturnEnum, TEXT("TUYear.DisplayName"), TEXT("(Y) Year"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_ETimeUnitsList_CRC() { return 3824512720U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_ETempUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_ETempUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETempUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_ETempUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETempUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETempUnitsList::TUCelsius")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETempUnitsList::TUFahrenheit")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETempUnitsList::TUKelvin")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETempUnitsList::ETempUnitsList_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ETempUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TUCelsius.DisplayName"), TEXT("() Celsius"));
			MetaData->SetValue(ReturnEnum, TEXT("TUCelsius.ToolTip"), TEXT("Temperature"));
			MetaData->SetValue(ReturnEnum, TEXT("TUFahrenheit.DisplayName"), TEXT("() Fahrenheit"));
			MetaData->SetValue(ReturnEnum, TEXT("TUKelvin.DisplayName"), TEXT("() Kelvin"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_ETempUnitsList_CRC() { return 2838222987U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeedUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeedUnitsList::SUMilesPH")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeedUnitsList::SUFootPS")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeedUnitsList::SUMetrePS")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeedUnitsList::SUKilometrePH")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeedUnitsList::SUKnot")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeedUnitsList::ESpeedUnitsList_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESpeedUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SUFootPS.DisplayName"), TEXT("() Foot per Second"));
			MetaData->SetValue(ReturnEnum, TEXT("SUKilometrePH.DisplayName"), TEXT("() Kilometre per Hour"));
			MetaData->SetValue(ReturnEnum, TEXT("SUKnot.DisplayName"), TEXT("() Knot"));
			MetaData->SetValue(ReturnEnum, TEXT("SUMetrePS.DisplayName"), TEXT("() Metre per Second"));
			MetaData->SetValue(ReturnEnum, TEXT("SUMilesPH.DisplayName"), TEXT("() Miles per Hour"));
			MetaData->SetValue(ReturnEnum, TEXT("SUMilesPH.ToolTip"), TEXT("Speed"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList_CRC() { return 3925928822U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_EPAUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EPAUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPAUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EPAUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPAUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::PAUAngularMil")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::PAUDegree")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::PAUGradian")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::PAUMinuteOfArc")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::PAURadian")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::PAUSecondOfArc")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPAUnitsList::EPAUnitsList_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EPAUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PAUAngularMil.DisplayName"), TEXT("() Angular Mil"));
			MetaData->SetValue(ReturnEnum, TEXT("PAUAngularMil.ToolTip"), TEXT("Plane Angle"));
			MetaData->SetValue(ReturnEnum, TEXT("PAUDegree.DisplayName"), TEXT("() Degree"));
			MetaData->SetValue(ReturnEnum, TEXT("PAUGradian.DisplayName"), TEXT("() Gradian"));
			MetaData->SetValue(ReturnEnum, TEXT("PAUMinuteOfArc.DisplayName"), TEXT("() Minute of Arc"));
			MetaData->SetValue(ReturnEnum, TEXT("PAURadian.DisplayName"), TEXT("() Radian"));
			MetaData->SetValue(ReturnEnum, TEXT("PAUSecondOfArc.DisplayName"), TEXT("() Second of Arc"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EPAUnitsList_CRC() { return 2597108130U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_EMassUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EMassUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMassUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EMassUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMassUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUTonne")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUKilogram")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUGram")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUMilligram")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUMicrogram")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUImperialTon")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUUSTon")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUStone")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUPound")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::MUOunce")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMassUnitsList::EMassUnitsList_MAX")), 10));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EMassUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MUGram.DisplayName"), TEXT("() Gram"));
			MetaData->SetValue(ReturnEnum, TEXT("MUImperialTon.DisplayName"), TEXT("() Imperial Ton"));
			MetaData->SetValue(ReturnEnum, TEXT("MUKilogram.DisplayName"), TEXT("() Kilogram"));
			MetaData->SetValue(ReturnEnum, TEXT("MUMicrogram.DisplayName"), TEXT("() Microgram"));
			MetaData->SetValue(ReturnEnum, TEXT("MUMilligram.DisplayName"), TEXT("() Milligram"));
			MetaData->SetValue(ReturnEnum, TEXT("MUOunce.DisplayName"), TEXT("() Ounce"));
			MetaData->SetValue(ReturnEnum, TEXT("MUPound.DisplayName"), TEXT("() Pound"));
			MetaData->SetValue(ReturnEnum, TEXT("MUStone.DisplayName"), TEXT("() Stone"));
			MetaData->SetValue(ReturnEnum, TEXT("MUTonne.DisplayName"), TEXT("() Tonne"));
			MetaData->SetValue(ReturnEnum, TEXT("MUTonne.ToolTip"), TEXT("Mass"));
			MetaData->SetValue(ReturnEnum, TEXT("MUUSTon.DisplayName"), TEXT("() US Ton"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EMassUnitsList_CRC() { return 4244252611U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_ELengthUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_ELengthUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ELengthUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_ELengthUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELengthUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUKilometre")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUMetre")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUCentimetre")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUMillimetre")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUMicrometre")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUNanometre")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUMile")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUYard")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUFoot")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUInch")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::LUNauticalMile")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ELengthUnitsList::ELengthUnitsList_MAX")), 11));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ELengthUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("LUCentimetre.DisplayName"), TEXT("() Centimetre"));
			MetaData->SetValue(ReturnEnum, TEXT("LUFoot.DisplayName"), TEXT("() Foot"));
			MetaData->SetValue(ReturnEnum, TEXT("LUInch.DisplayName"), TEXT("() Inch"));
			MetaData->SetValue(ReturnEnum, TEXT("LUKilometre.DisplayName"), TEXT("() Kilometre"));
			MetaData->SetValue(ReturnEnum, TEXT("LUKilometre.ToolTip"), TEXT("Length"));
			MetaData->SetValue(ReturnEnum, TEXT("LUMetre.DisplayName"), TEXT("() Metre"));
			MetaData->SetValue(ReturnEnum, TEXT("LUMicrometre.DisplayName"), TEXT("() Micrometre"));
			MetaData->SetValue(ReturnEnum, TEXT("LUMile.DisplayName"), TEXT("() Mile"));
			MetaData->SetValue(ReturnEnum, TEXT("LUMillimetre.DisplayName"), TEXT("() Millimetre"));
			MetaData->SetValue(ReturnEnum, TEXT("LUNanometre.DisplayName"), TEXT("() Nanometre"));
			MetaData->SetValue(ReturnEnum, TEXT("LUNauticalMile.DisplayName"), TEXT("() Nautical Mile"));
			MetaData->SetValue(ReturnEnum, TEXT("LUYard.DisplayName"), TEXT("() Yard"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_ELengthUnitsList_CRC() { return 2427470076U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EFrequencyUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFrequencyUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrequencyUnitsList::FUHertz")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrequencyUnitsList::FUKilohertz")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrequencyUnitsList::FUMegahertz")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrequencyUnitsList::FUGigahertz")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFrequencyUnitsList::EFrequencyUnitsList_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EFrequencyUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("FUGigahertz.DisplayName"), TEXT("() Gigahertz"));
			MetaData->SetValue(ReturnEnum, TEXT("FUHertz.DisplayName"), TEXT("() Hertz"));
			MetaData->SetValue(ReturnEnum, TEXT("FUHertz.ToolTip"), TEXT("Frequency"));
			MetaData->SetValue(ReturnEnum, TEXT("FUKilohertz.DisplayName"), TEXT("() Kilohertz"));
			MetaData->SetValue(ReturnEnum, TEXT("FUMegahertz.DisplayName"), TEXT("() Megahertz"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList_CRC() { return 1869755585U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_EDSUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EDSUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDSUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EDSUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDSUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUBit")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUKilobit")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUKibibit")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUMegabit")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUMebibit")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUGigabit")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUGibibit")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUTerabit")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUTebibit")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUPetabit")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUPebibit")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUByte")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUKilobyte")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUKibibyte")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUMegabyte")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUMebibyte")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUGigabyte")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUGibibyte")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUTerabyte")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUTebibyte")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUPetabyte")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::DSUPebibyte")), 21));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDSUnitsList::EDSUnitsList_MAX")), 22));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EDSUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUBit.DisplayName"), TEXT("() Bit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUBit.ToolTip"), TEXT("Digital Storage"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUByte.DisplayName"), TEXT("() Byte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUGibibit.DisplayName"), TEXT("() Gibibit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUGibibyte.DisplayName"), TEXT("() Gibibyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUGigabit.DisplayName"), TEXT("() Gigabit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUGigabyte.DisplayName"), TEXT("() Gigabyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUKibibit.DisplayName"), TEXT("() Kibibit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUKibibyte.DisplayName"), TEXT("() Kibibyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUKilobit.DisplayName"), TEXT("() Kilobit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUKilobyte.DisplayName"), TEXT("() Kilobyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUMebibit.DisplayName"), TEXT("() Mebibit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUMebibyte.DisplayName"), TEXT("() Mebibyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUMegabit.DisplayName"), TEXT("() Megabit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUMegabyte.DisplayName"), TEXT("() Megabyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUPebibit.DisplayName"), TEXT("() Pebibit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUPebibyte.DisplayName"), TEXT("() Pebibyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUPetabit.DisplayName"), TEXT("() Petabit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUPetabyte.DisplayName"), TEXT("() Petabyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUTebibit.DisplayName"), TEXT("() Tebibit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUTebibyte.DisplayName"), TEXT("() Tebibyte"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUTerabit.DisplayName"), TEXT("() Terabit"));
			MetaData->SetValue(ReturnEnum, TEXT("DSUTerabyte.DisplayName"), TEXT("() Terabyte"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EDSUnitsList_CRC() { return 1679795973U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_EDTRUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EDTRUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDTRUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EDTRUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDTRUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUBitPS")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUKilobitPS")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUKilobytePS")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUKibibitPS")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUMegabitPS")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUMegabytePS")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUMebibitPS")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUGigabitPS")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUGigabytePS")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUGibibitPS")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUTerabitPS")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUTerabytePS")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::DTRUTebibitPS")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDTRUnitsList::EDTRUnitsList_MAX")), 13));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EDTRUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUBitPS.DisplayName"), TEXT("() Bit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUBitPS.ToolTip"), TEXT("Data Transfer Rate"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUGibibitPS.DisplayName"), TEXT("() Gibibit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUGigabitPS.DisplayName"), TEXT("() Gigabit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUGigabytePS.DisplayName"), TEXT("() Gigabyte per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUKibibitPS.DisplayName"), TEXT("() Kibibit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUKilobitPS.DisplayName"), TEXT("() Kilobit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUKilobytePS.DisplayName"), TEXT("() Kilobyte per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUMebibitPS.DisplayName"), TEXT("() Mebibit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUMegabitPS.DisplayName"), TEXT("() Megabit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUMegabytePS.DisplayName"), TEXT("() Megabyte per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUTebibitPS.DisplayName"), TEXT("() Tebibit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUTerabitPS.DisplayName"), TEXT("() Terabit per second"));
			MetaData->SetValue(ReturnEnum, TEXT("DTRUTerabytePS.DisplayName"), TEXT("() Terabyte per second"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EDTRUnitsList_CRC() { return 1485463796U; }
	UEnum* Z_Construct_UEnum_PPKLibrary_EAreaUnitsList()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UEnum_PPKLibrary_EAreaUnitsList_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAreaUnitsList"), 0, Get_Z_Construct_UEnum_PPKLibrary_EAreaUnitsList_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAreaUnitsList"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUSKilometre")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUSMetre")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUSMile")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUSYard")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUSFoot")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUSInch")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUHectare")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::AUAcre")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAreaUnitsList::EAreaUnitsList_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EAreaUnitsList");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AUAcre.DisplayName"), TEXT("() Acre"));
			MetaData->SetValue(ReturnEnum, TEXT("AUHectare.DisplayName"), TEXT("() Hectare"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSFoot.DisplayName"), TEXT("() Square Foot"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSInch.DisplayName"), TEXT("() Square Inch"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSKilometre.DisplayName"), TEXT("() Square Kilometre"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSKilometre.ToolTip"), TEXT("Area"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSMetre.DisplayName"), TEXT("() Square Metre"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSMile.DisplayName"), TEXT("() Square Mile"));
			MetaData->SetValue(ReturnEnum, TEXT("AUSYard.DisplayName"), TEXT("() Square Yard"));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PPKLibrary_EAreaUnitsList_CRC() { return 1868125877U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVolUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FVolUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("VolUnitsStruct"), sizeof(FVolUnitsStruct), Get_Z_Construct_UScriptStruct_FVolUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VolUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FVolUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UCubicInch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UCubicInch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UCubicInch, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UCubicFoot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UCubicFoot"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UCubicFoot, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialTeaspoon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialTeaspoon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialTeaspoon, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialTablespoon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialTablespoon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialTablespoon, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialFluidOunce = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialFluidOunce"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialFluidOunce, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialCup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialCup"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialCup, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialPint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialPint"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialPint, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialQuart = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialQuart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialQuart, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialGallon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialGallon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialGallon, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMillilitre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMillilitre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMillilitre, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_ULitre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ULitre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ULitre, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UCubicMetre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UCubicMetre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UCubicMetre, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSTeaspoon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSTeaspoon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSTeaspoon, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSTablespoon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSTablespoon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSTablespoon, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSFluidOunce = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSFluidOunce"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSFluidOunce, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSLegalCup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSLegalCup"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSLegalCup, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSLiquidPint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSLiquidPint"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSLiquidPint, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSLiquidQuart = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSLiquidQuart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSLiquidQuart, FVolUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSLiquidGallon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSLiquidGallon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSLiquidGallon, FVolUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UCubicInch, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UCubicInch, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UCubicFoot, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UCubicFoot, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialTeaspoon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialTeaspoon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialTablespoon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialTablespoon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialFluidOunce, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialFluidOunce, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialCup, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialCup, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialPint, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialPint, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialQuart, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialQuart, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialGallon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialGallon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMillilitre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMillilitre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_ULitre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_ULitre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UCubicMetre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UCubicMetre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSTeaspoon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSTeaspoon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSTablespoon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSTablespoon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSFluidOunce, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSFluidOunce, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSLegalCup, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSLegalCup, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSLiquidPint, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSLiquidPint, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSLiquidQuart, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSLiquidQuart, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSLiquidGallon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSLiquidGallon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVolUnitsStruct_CRC() { return 4109254277U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTimeUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FTimeUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TimeUnitsStruct"), sizeof(FTimeUnitsStruct), Get_Z_Construct_UScriptStruct_FTimeUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimeUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTimeUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UCentury = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UCentury"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UCentury, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UDecade = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UDecade"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UDecade, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UYear = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UYear"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UYear, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMonth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMonth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMonth, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UWeek = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UWeek"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UWeek, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UDay = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UDay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UDay, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UHour = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UHour"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UHour, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMinute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMinute"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMinute, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USecond = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USecond"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USecond, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMillisecond = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMillisecond"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMillisecond, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMicrosecond = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMicrosecond"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMicrosecond, FTimeUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UNanosecond = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UNanosecond"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UNanosecond, FTimeUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UCentury, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UCentury, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UDecade, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UDecade, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UYear, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UYear, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMonth, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMonth, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UWeek, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UWeek, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UDay, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UDay, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UHour, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UHour, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMinute, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMinute, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USecond, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USecond, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMillisecond, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMillisecond, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMicrosecond, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMicrosecond, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UNanosecond, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UNanosecond, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTimeUnitsStruct_CRC() { return 2826713717U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTempUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FTempUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TempUnitsStruct"), sizeof(FTempUnitsStruct), Get_Z_Construct_UScriptStruct_FTempUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TempUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTempUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UKelvin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKelvin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKelvin, FTempUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UFahrenheit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UFahrenheit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UFahrenheit, FTempUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UCelsius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UCelsius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UCelsius, FTempUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKelvin, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKelvin, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UFahrenheit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UFahrenheit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UCelsius, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UCelsius, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTempUnitsStruct_CRC() { return 4213724493U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSpeedUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FSpeedUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SpeedUnitsStruct"), sizeof(FSpeedUnitsStruct), Get_Z_Construct_UScriptStruct_FSpeedUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpeedUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSpeedUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UKnot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKnot"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKnot, FSpeedUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilometrePH = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilometrePH"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilometrePH, FSpeedUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMetrePS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMetrePS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMetrePS, FSpeedUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UFootPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UFootPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UFootPS, FSpeedUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMilesPH = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMilesPH"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMilesPH, FSpeedUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKnot, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKnot, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilometrePH, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilometrePH, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMetrePS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMetrePS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UFootPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UFootPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMilesPH, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMilesPH, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSpeedUnitsStruct_CRC() { return 392420590U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPAUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FPAUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PAUnitsStruct"), sizeof(FPAUnitsStruct), Get_Z_Construct_UScriptStruct_FPAUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PAUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPAUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_USecondOfArc = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USecondOfArc"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USecondOfArc, FPAUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_URadian = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("URadian"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(URadian, FPAUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMinuteOfArc = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMinuteOfArc"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMinuteOfArc, FPAUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGradian = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGradian"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGradian, FPAUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UDegree = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UDegree"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UDegree, FPAUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UAngularMil = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UAngularMil"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UAngularMil, FPAUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USecondOfArc, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USecondOfArc, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_URadian, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_URadian, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMinuteOfArc, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMinuteOfArc, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGradian, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGradian, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UDegree, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UDegree, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UAngularMil, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UAngularMil, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPAUnitsStruct_CRC() { return 4202107380U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMassUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FMassUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MassUnitsStruct"), sizeof(FMassUnitsStruct), Get_Z_Construct_UScriptStruct_FMassUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MassUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMassUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UOunce = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UOunce"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UOunce, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UPound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UPound"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UPound, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UStone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UStone"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UStone, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UUSTon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UUSTon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UUSTon, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UImperialTon = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UImperialTon"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UImperialTon, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMicrogram = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMicrogram"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMicrogram, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMilligram = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMilligram"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMilligram, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGram = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGram"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGram, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilogram = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilogram"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilogram, FMassUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTonne = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTonne"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTonne, FMassUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UOunce, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UOunce, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UPound, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UPound, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UStone, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UStone, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UUSTon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UUSTon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UImperialTon, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UImperialTon, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMicrogram, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMicrogram, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMilligram, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMilligram, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGram, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGram, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilogram, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilogram, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTonne, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTonne, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMassUnitsStruct_CRC() { return 307383662U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLengthUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FLengthUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("LengthUnitsStruct"), sizeof(FLengthUnitsStruct), Get_Z_Construct_UScriptStruct_FLengthUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LengthUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLengthUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UNauticalMile = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UNauticalMile"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UNauticalMile, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UInch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UInch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UInch, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UFoot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UFoot"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UFoot, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UYard = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UYard"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UYard, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMile = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMile"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMile, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UNanometre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UNanometre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UNanometre, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMicrometre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMicrometre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMicrometre, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMillimetre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMillimetre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMillimetre, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UCentimetre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UCentimetre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UCentimetre, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMetre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMetre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMetre, FLengthUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilometre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilometre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilometre, FLengthUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UNauticalMile, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UNauticalMile, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UInch, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UInch, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UFoot, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UFoot, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UYard, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UYard, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMile, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMile, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UNanometre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UNanometre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMicrometre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMicrometre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMillimetre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMillimetre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UCentimetre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UCentimetre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMetre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMetre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilometre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilometre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLengthUnitsStruct_CRC() { return 1643624406U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFrequencyUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FFrequencyUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("FrequencyUnitsStruct"), sizeof(FFrequencyUnitsStruct), Get_Z_Construct_UScriptStruct_FFrequencyUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FrequencyUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFrequencyUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UGigahertz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGigahertz"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGigahertz, FFrequencyUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMegahertz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMegahertz"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMegahertz, FFrequencyUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilohertz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilohertz"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilohertz, FFrequencyUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UHertz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UHertz"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UHertz, FFrequencyUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGigahertz, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGigahertz, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMegahertz, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMegahertz, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilohertz, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilohertz, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UHertz, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UHertz, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFrequencyUnitsStruct_CRC() { return 3859322159U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDSUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FDSUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DSUnitsStruct"), sizeof(FDSUnitsStruct), Get_Z_Construct_UScriptStruct_FDSUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DSUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDSUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UPebibyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UPebibyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UPebibyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UPetabyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UPetabyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UPetabyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTebibyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTebibyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTebibyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTerabyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTerabyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTerabyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGibibyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGibibyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGibibyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGigabyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGigabyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGigabyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMebibyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMebibyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMebibyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMegabyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMegabyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMegabyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKibibyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKibibyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKibibyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilobyte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilobyte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilobyte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UByte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UByte, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UPebibit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UPebibit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UPebibit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UPetabit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UPetabit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UPetabit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTebibit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTebibit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTebibit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTerabit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTerabit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTerabit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGibibit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGibibit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGibibit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGigabit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGigabit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGigabit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMebibit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMebibit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMebibit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMegabit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMegabit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMegabit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKibibit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKibibit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKibibit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilobit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilobit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilobit, FDSUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UBit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UBit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UBit, FDSUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UPebibyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UPebibyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UPetabyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UPetabyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTebibyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTebibyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTerabyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTerabyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGibibyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGibibyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGigabyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGigabyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMebibyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMebibyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMegabyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMegabyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKibibyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKibibyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilobyte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilobyte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UByte, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UByte, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UPebibit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UPebibit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UPetabit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UPetabit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTebibit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTebibit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTerabit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTerabit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGibibit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGibibit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGigabit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGigabit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMebibit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMebibit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMegabit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMegabit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKibibit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKibibit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilobit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilobit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UBit, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UBit, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDSUnitsStruct_CRC() { return 2073506419U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDTRUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FDTRUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DTRUnitsStruct"), sizeof(FDTRUnitsStruct), Get_Z_Construct_UScriptStruct_FDTRUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DTRUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDTRUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UTebibitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTebibitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTebibitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTerabytePS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTerabytePS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTerabytePS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UTerabitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UTerabitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTerabitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGibibitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGibibitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGibibitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGigabytePS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGigabytePS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGigabytePS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UGigabitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UGigabitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UGigabitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMebibitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMebibitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMebibitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMegabytePS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMegabytePS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMegabytePS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UMegabitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UMegabitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UMegabitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKibibitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKibibitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKibibitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilobytePS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilobytePS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilobytePS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UKilobitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UKilobitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UKilobitPS, FDTRUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UBitPS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UBitPS"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UBitPS, FDTRUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTebibitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTebibitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTerabytePS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTerabytePS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UTerabitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UTerabitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGibibitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGibibitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGigabytePS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGigabytePS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UGigabitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UGigabitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMebibitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMebibitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMegabytePS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMegabytePS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UMegabitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UMegabitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKibibitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKibibitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilobytePS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilobytePS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UKilobitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UKilobitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UBitPS, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UBitPS, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDTRUnitsStruct_CRC() { return 3638173560U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAreaUnitsStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PPKLibrary();
		extern uint32 Get_Z_Construct_UScriptStruct_FAreaUnitsStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AreaUnitsStruct"), sizeof(FAreaUnitsStruct), Get_Z_Construct_UScriptStruct_FAreaUnitsStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AreaUnitsStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAreaUnitsStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_UAcre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UAcre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UAcre, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_UHectare = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UHectare"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UHectare, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USInch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USInch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USInch, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USFoot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USFoot"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USFoot, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USYard = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USYard"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USYard, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USMile = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USMile"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USMile, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USMetre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USMetre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USMetre, FAreaUnitsStruct), 0x0010000000000005);
			UProperty* NewProp_USKilometre = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("USKilometre"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(USKilometre, FAreaUnitsStruct), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UAcre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UAcre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_UHectare, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_UHectare, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USInch, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USInch, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USFoot, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USFoot, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USYard, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USYard, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USMile, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USMile, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USMetre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USMetre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(NewProp_USKilometre, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(NewProp_USKilometre, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAreaUnitsStruct_CRC() { return 3411840153U; }
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EAreaUnitsList> UnitFrom;
			TEnumAsByte<EAreaUnitsList> UnitToValueA;
			TEnumAsByte<EAreaUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AreaUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EAreaUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EAreaUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EAreaUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventAreaUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Area Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EAreaUnitsList> UnitFrom;
			bool bTruncate;
			FAreaUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AreaUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FAreaUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EAreaUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventAreaUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Area Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EAreaUnitsList> UnitFrom;
			TEnumAsByte<EAreaUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AreaUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EAreaUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EAreaUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventAreaUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Area Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EDSUnitsList> UnitFrom;
			TEnumAsByte<EDSUnitsList> UnitToValueA;
			TEnumAsByte<EDSUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DSUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDSUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDSUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDSUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventDSUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Digital Storage Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EDSUnitsList> UnitFrom;
			bool bTruncate;
			FDSUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DSUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FDSUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDSUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventDSUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Digital Storage Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EDSUnitsList> UnitFrom;
			TEnumAsByte<EDSUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DSUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDSUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDSUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventDSUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Digital Storage Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EDTRUnitsList> UnitFrom;
			TEnumAsByte<EDTRUnitsList> UnitToValueA;
			TEnumAsByte<EDTRUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DTRUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDTRUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDTRUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDTRUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventDTRUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Data Transfer Rate Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EDTRUnitsList> UnitFrom;
			bool bTruncate;
			FDTRUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DTRUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FDTRUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDTRUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventDTRUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Data Transfer Rate Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EDTRUnitsList> UnitFrom;
			TEnumAsByte<EDTRUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DTRUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDTRUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EDTRUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventDTRUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Data Transfer Rate Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EFrequencyUnitsList> UnitFrom;
			TEnumAsByte<EFrequencyUnitsList> UnitToValueA;
			TEnumAsByte<EFrequencyUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FrequencyUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventFrequencyUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Frequency Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EFrequencyUnitsList> UnitFrom;
			bool bTruncate;
			FFrequencyUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FrequencyUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FFrequencyUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventFrequencyUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Frequency Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EFrequencyUnitsList> UnitFrom;
			TEnumAsByte<EFrequencyUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FrequencyUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EFrequencyUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventFrequencyUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Frequency Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<ELengthUnitsList> UnitFrom;
			TEnumAsByte<ELengthUnitsList> UnitToValueA;
			TEnumAsByte<ELengthUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LengthUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ELengthUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ELengthUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ELengthUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventLengthUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Length Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<ELengthUnitsList> UnitFrom;
			bool bTruncate;
			FLengthUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LengthUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FLengthUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ELengthUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventLengthUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Length Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<ELengthUnitsList> UnitFrom;
			TEnumAsByte<ELengthUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LengthUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ELengthUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ELengthUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventLengthUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Length Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EMassUnitsList> UnitFrom;
			TEnumAsByte<EMassUnitsList> UnitToValueA;
			TEnumAsByte<EMassUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MassUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EMassUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EMassUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EMassUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventMassUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Mass Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EMassUnitsList> UnitFrom;
			bool bTruncate;
			FMassUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MassUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FMassUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EMassUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventMassUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Mass Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EMassUnitsList> UnitFrom;
			TEnumAsByte<EMassUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MassUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EMassUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EMassUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventMassUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Mass Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EPAUnitsList> UnitFrom;
			TEnumAsByte<EPAUnitsList> UnitToValueA;
			TEnumAsByte<EPAUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PAUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EPAUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EPAUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EPAUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventPAUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Plane Angle Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EPAUnitsList> UnitFrom;
			bool bTruncate;
			FPAUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PAUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FPAUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EPAUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventPAUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Plane Angle Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EPAUnitsList> UnitFrom;
			TEnumAsByte<EPAUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PAUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EPAUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EPAUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventPAUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Plane Angle Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<ESpeedUnitsList> UnitFrom;
			TEnumAsByte<ESpeedUnitsList> UnitToValueA;
			TEnumAsByte<ESpeedUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpeedUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventSpeedUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Speed Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<ESpeedUnitsList> UnitFrom;
			bool bTruncate;
			FSpeedUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpeedUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FSpeedUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventSpeedUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Speed Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<ESpeedUnitsList> UnitFrom;
			TEnumAsByte<ESpeedUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpeedUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ESpeedUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventSpeedUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Speed Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<ETempUnitsList> UnitFrom;
			TEnumAsByte<ETempUnitsList> UnitToValueA;
			TEnumAsByte<ETempUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TempUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETempUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETempUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETempUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventTempUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Temperature Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<ETempUnitsList> UnitFrom;
			bool bTruncate;
			FTempUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TempUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FTempUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETempUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventTempUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Temperature Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<ETempUnitsList> UnitFrom;
			TEnumAsByte<ETempUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TempUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETempUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETempUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventTempUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Temperature Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<ETimeUnitsList> UnitFrom;
			TEnumAsByte<ETimeUnitsList> UnitToValueA;
			TEnumAsByte<ETimeUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimeUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETimeUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETimeUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETimeUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventTimeUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Time Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<ETimeUnitsList> UnitFrom;
			bool bTruncate;
			FTimeUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimeUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FTimeUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETimeUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventTimeUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Time Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<ETimeUnitsList> UnitFrom;
			TEnumAsByte<ETimeUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TimeUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETimeUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_ETimeUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventTimeUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Time Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterAdvanced()
	{
		struct PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms
		{
			float UnitValue;
			TEnumAsByte<EVolUnitsList> UnitFrom;
			TEnumAsByte<EVolUnitsList> UnitToValueA;
			TEnumAsByte<EVolUnitsList> UnitToValueB;
			bool bTruncateA;
			bool bTruncateB;
			float UnitValueOriginal;
			float UnitValueATo;
			float UnitValueBTo;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VolUnitsConverterAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms));
			UProperty* NewProp_UnitValueBTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueBTo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueBTo, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueATo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueATo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueATo, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000180);
			UProperty* NewProp_UnitValueOriginal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValueOriginal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValueOriginal, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000180);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateB, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateB, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateB, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncateA, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms, bool);
			UProperty* NewProp_bTruncateA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncateA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncateA, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncateA, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitToValueB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueB, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EVolUnitsList());
			UProperty* NewProp_UnitToValueA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitToValueA"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitToValueA, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EVolUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EVolUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventVolUnitsConverterAdvanced_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Volume Units Converter (Advanced)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns two floats with the converted units"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterComplete()
	{
		struct PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms
		{
			float UnitValue;
			TEnumAsByte<EVolUnitsList> UnitFrom;
			bool bTruncate;
			FVolUnitsStruct UnitList;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VolUnitsConverterComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms));
			UProperty* NewProp_UnitList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UnitList, PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVolUnitsStruct());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EVolUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventVolUnitsConverterComplete_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Volume Units Converter (Complete)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns all converted units in floats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterSimple()
	{
		struct PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms
		{
			float UnitValue;
			TEnumAsByte<EVolUnitsList> UnitFrom;
			TEnumAsByte<EVolUnitsList> UnitTo;
			bool bTruncate;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPPKLibraryUnitConverters();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VolUnitsConverterSimple"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTruncate, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms, bool);
			UProperty* NewProp_bTruncate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTruncate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTruncate, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bTruncate, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms), sizeof(bool), true);
			UProperty* NewProp_UnitTo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitTo"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitTo, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EVolUnitsList());
			UProperty* NewProp_UnitFrom = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UnitFrom, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms), 0x0010000000000082, Z_Construct_UEnum_PPKLibrary_EVolUnitsList());
			UProperty* NewProp_UnitValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UnitValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitValue, PPKLibraryUnitConverters_eventVolUnitsConverterSimple_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PP2KLibrary|Units|Converters"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Volume Units Converter"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a float with the converted unit"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPPKLibraryUnitConverters_NoRegister()
	{
		return UPPKLibraryUnitConverters::StaticClass();
	}
	UClass* Z_Construct_UClass_UPPKLibraryUnitConverters()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_PPKLibrary();
			OuterClass = UPPKLibraryUnitConverters::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterSimple());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterAdvanced());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterComplete());
				OuterClass->LinkChild(Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterSimple());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterAdvanced(), "AreaUnitsConverterAdvanced"); // 394384974
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterComplete(), "AreaUnitsConverterComplete"); // 2152672222
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_AreaUnitsConverterSimple(), "AreaUnitsConverterSimple"); // 1485836700
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterAdvanced(), "DSUnitsConverterAdvanced"); // 3918945511
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterComplete(), "DSUnitsConverterComplete"); // 2051172681
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_DSUnitsConverterSimple(), "DSUnitsConverterSimple"); // 800157443
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterAdvanced(), "DTRUnitsConverterAdvanced"); // 1770890867
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterComplete(), "DTRUnitsConverterComplete"); // 3878592574
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_DTRUnitsConverterSimple(), "DTRUnitsConverterSimple"); // 4077815619
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterAdvanced(), "FrequencyUnitsConverterAdvanced"); // 860867723
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterComplete(), "FrequencyUnitsConverterComplete"); // 1584093154
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_FrequencyUnitsConverterSimple(), "FrequencyUnitsConverterSimple"); // 2119035720
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterAdvanced(), "LengthUnitsConverterAdvanced"); // 3735564675
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterComplete(), "LengthUnitsConverterComplete"); // 1549493269
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_LengthUnitsConverterSimple(), "LengthUnitsConverterSimple"); // 3225967735
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterAdvanced(), "MassUnitsConverterAdvanced"); // 135909978
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterComplete(), "MassUnitsConverterComplete"); // 4017005868
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_MassUnitsConverterSimple(), "MassUnitsConverterSimple"); // 3482556603
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterAdvanced(), "PAUnitsConverterAdvanced"); // 1634395405
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterComplete(), "PAUnitsConverterComplete"); // 2661230768
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_PAUnitsConverterSimple(), "PAUnitsConverterSimple"); // 3141848223
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterAdvanced(), "SpeedUnitsConverterAdvanced"); // 1824476616
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterComplete(), "SpeedUnitsConverterComplete"); // 3603163436
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_SpeedUnitsConverterSimple(), "SpeedUnitsConverterSimple"); // 2964588484
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterAdvanced(), "TempUnitsConverterAdvanced"); // 3248614242
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterComplete(), "TempUnitsConverterComplete"); // 2786533607
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_TempUnitsConverterSimple(), "TempUnitsConverterSimple"); // 3515947643
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterAdvanced(), "TimeUnitsConverterAdvanced"); // 1022013090
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterComplete(), "TimeUnitsConverterComplete"); // 3108326180
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_TimeUnitsConverterSimple(), "TimeUnitsConverterSimple"); // 311261981
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterAdvanced(), "VolUnitsConverterAdvanced"); // 2313698749
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterComplete(), "VolUnitsConverterComplete"); // 1586660483
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPPKLibraryUnitConverters_VolUnitsConverterSimple(), "VolUnitsConverterSimple"); // 1879746653
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Core/PPKLibraryUnitConverters.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPPKLibraryUnitConverters(Z_Construct_UClass_UPPKLibraryUnitConverters, &UPPKLibraryUnitConverters::StaticClass, TEXT("UPPKLibraryUnitConverters"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPPKLibraryUnitConverters);
	UPackage* Z_Construct_UPackage__Script_PPKLibrary()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/PPKLibrary")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x5D23C70A;
			Guid.B = 0xEF25A6B1;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
