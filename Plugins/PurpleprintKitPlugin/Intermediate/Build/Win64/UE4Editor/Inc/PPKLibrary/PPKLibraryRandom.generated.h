// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#ifdef PPKLIBRARY_PPKLibraryRandom_generated_h
#error "PPKLibraryRandom.generated.h already included, missing '#pragma once' in PPKLibraryRandom.h"
#endif
#define PPKLIBRARY_PPKLibraryRandom_generated_h

#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execRandomFloat_Canonical) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryRandom::RandomFloat_Canonical(); \
	} \
 \
	DECLARE_FUNCTION(execRandomFloat_Uniform) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Max); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryRandom::RandomFloat_Uniform(Z_Param_Max); \
	} \
 \
	DECLARE_FUNCTION(execRandomInt_MersenneTwister) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryRandom::RandomInt_MersenneTwister(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomInt_Bernoulli) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryRandom::RandomInt_Bernoulli(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomInt_Uniform) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Max); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryRandom::RandomInt_Uniform(Z_Param_Max); \
	} \
 \
	DECLARE_FUNCTION(execRandomByte_MersenneTwister) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryRandom::RandomByte_MersenneTwister(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomByte_Bernoulli) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryRandom::RandomByte_Bernoulli(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomByte_Uniform) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Max); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryRandom::RandomByte_Uniform(Z_Param_Max); \
	} \
 \
	DECLARE_FUNCTION(execRandomBool_MersenneTwister) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UPPKLibraryRandom::RandomBool_MersenneTwister(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomBool_Bernoulli) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UPPKLibraryRandom::RandomBool_Bernoulli(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomBool_Uniform) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UPPKLibraryRandom::RandomBool_Uniform(); \
	} \
 \
	DECLARE_FUNCTION(execRandomSeedByEntropy) \
	{ \
		P_FINISH; \
		UPPKLibraryRandom::RandomSeedByEntropy(); \
	} \
 \
	DECLARE_FUNCTION(execRandomSeedByTime) \
	{ \
		P_FINISH; \
		UPPKLibraryRandom::RandomSeedByTime(); \
	} \
 \
	DECLARE_FUNCTION(execCreateRandomSeed) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Seed); \
		P_FINISH; \
		UPPKLibraryRandom::CreateRandomSeed(Z_Param_Seed); \
	} \
 \
	DECLARE_FUNCTION(execBuildRandom) \
	{ \
		P_FINISH; \
		UPPKLibraryRandom::BuildRandom(); \
	}


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execRandomFloat_Canonical) \
	{ \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryRandom::RandomFloat_Canonical(); \
	} \
 \
	DECLARE_FUNCTION(execRandomFloat_Uniform) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Max); \
		P_FINISH; \
		*(float*)Z_Param__Result=UPPKLibraryRandom::RandomFloat_Uniform(Z_Param_Max); \
	} \
 \
	DECLARE_FUNCTION(execRandomInt_MersenneTwister) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryRandom::RandomInt_MersenneTwister(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomInt_Bernoulli) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryRandom::RandomInt_Bernoulli(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomInt_Uniform) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Max); \
		P_FINISH; \
		*(int32*)Z_Param__Result=UPPKLibraryRandom::RandomInt_Uniform(Z_Param_Max); \
	} \
 \
	DECLARE_FUNCTION(execRandomByte_MersenneTwister) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryRandom::RandomByte_MersenneTwister(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomByte_Bernoulli) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryRandom::RandomByte_Bernoulli(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomByte_Uniform) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_Max); \
		P_FINISH; \
		*(uint8*)Z_Param__Result=UPPKLibraryRandom::RandomByte_Uniform(Z_Param_Max); \
	} \
 \
	DECLARE_FUNCTION(execRandomBool_MersenneTwister) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UPPKLibraryRandom::RandomBool_MersenneTwister(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomBool_Bernoulli) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Bias); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UPPKLibraryRandom::RandomBool_Bernoulli(Z_Param_Bias); \
	} \
 \
	DECLARE_FUNCTION(execRandomBool_Uniform) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UPPKLibraryRandom::RandomBool_Uniform(); \
	} \
 \
	DECLARE_FUNCTION(execRandomSeedByEntropy) \
	{ \
		P_FINISH; \
		UPPKLibraryRandom::RandomSeedByEntropy(); \
	} \
 \
	DECLARE_FUNCTION(execRandomSeedByTime) \
	{ \
		P_FINISH; \
		UPPKLibraryRandom::RandomSeedByTime(); \
	} \
 \
	DECLARE_FUNCTION(execCreateRandomSeed) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Seed); \
		P_FINISH; \
		UPPKLibraryRandom::CreateRandomSeed(Z_Param_Seed); \
	} \
 \
	DECLARE_FUNCTION(execBuildRandom) \
	{ \
		P_FINISH; \
		UPPKLibraryRandom::BuildRandom(); \
	}


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUPPKLibraryRandom(); \
	friend PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryRandom(); \
	public: \
	DECLARE_CLASS(UPPKLibraryRandom, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/PPKLibrary"), NO_API) \
	DECLARE_SERIALIZER(UPPKLibraryRandom) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_INCLASS \
	private: \
	static void StaticRegisterNativesUPPKLibraryRandom(); \
	friend PPKLIBRARY_API class UClass* Z_Construct_UClass_UPPKLibraryRandom(); \
	public: \
	DECLARE_CLASS(UPPKLibraryRandom, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/PPKLibrary"), NO_API) \
	DECLARE_SERIALIZER(UPPKLibraryRandom) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UPPKLibraryRandom(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UPPKLibraryRandom) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UPPKLibraryRandom); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UPPKLibraryRandom); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UPPKLibraryRandom(const UPPKLibraryRandom& InCopy); \
public:


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_ENHANCED_CONSTRUCTORS \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UPPKLibraryRandom(const UPPKLibraryRandom& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UPPKLibraryRandom); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UPPKLibraryRandom); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UPPKLibraryRandom)


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_43_PROLOG
#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_RPC_WRAPPERS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_INCLASS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_RPC_WRAPPERS_NO_PURE_DECLS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_INCLASS_NO_PURE_DECLS \
	projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h_45_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID projectvelorum_Plugins_PurpleprintKitPlugin_Source_PPKLibrary_Core_PPKLibraryRandom_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
