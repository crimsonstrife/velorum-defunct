// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/ScalabilityLibraryPrivatePCH.h"
#include "ScalabilityLibrary.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeScalabilityLibrary() {}
static class UEnum* ENamedScalabilityLevel_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SCALABILITYLIBRARY_API class UEnum* Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel();
		extern SCALABILITYLIBRARY_API class UPackage* Z_Construct_UPackage_ScalabilityLibrary();
		Singleton = GetStaticEnum(Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel, Z_Construct_UPackage_ScalabilityLibrary(), TEXT("ENamedScalabilityLevel"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ENamedScalabilityLevel(ENamedScalabilityLevel_StaticEnum, TEXT("/Script/ScalabilityLibrary"));
	void UScalabilityFunctionLibrary::StaticRegisterNativesUScalabilityFunctionLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"AutoSetQualityLevel",(Native)&UScalabilityFunctionLibrary::execAutoSetQualityLevel);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"ChangeScreenResolution",(Native)&UScalabilityFunctionLibrary::execChangeScreenResolution);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetAntiAliasingQuality",(Native)&UScalabilityFunctionLibrary::execGetAntiAliasingQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetAntiAliasingQualityAsName",(Native)&UScalabilityFunctionLibrary::execGetAntiAliasingQualityAsName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetEffectsQuality",(Native)&UScalabilityFunctionLibrary::execGetEffectsQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetEffectsQualityAsName",(Native)&UScalabilityFunctionLibrary::execGetEffectsQualityAsName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetPostProcessQuality",(Native)&UScalabilityFunctionLibrary::execGetPostProcessQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetPostProcessQualityAsName",(Native)&UScalabilityFunctionLibrary::execGetPostProcessQualityAsName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetResolutionScale",(Native)&UScalabilityFunctionLibrary::execGetResolutionScale);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetScreenResolution",(Native)&UScalabilityFunctionLibrary::execGetScreenResolution);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetShadowQuality",(Native)&UScalabilityFunctionLibrary::execGetShadowQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetShadowQualityAsName",(Native)&UScalabilityFunctionLibrary::execGetShadowQualityAsName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetSupportedScreenResolutions",(Native)&UScalabilityFunctionLibrary::execGetSupportedScreenResolutions);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetTextureQuality",(Native)&UScalabilityFunctionLibrary::execGetTextureQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetTextureQualityAsName",(Native)&UScalabilityFunctionLibrary::execGetTextureQualityAsName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetVideoQualitySettings",(Native)&UScalabilityFunctionLibrary::execGetVideoQualitySettings);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetViewDistanceQuality",(Native)&UScalabilityFunctionLibrary::execGetViewDistanceQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"GetViewDistanceQualityAsName",(Native)&UScalabilityFunctionLibrary::execGetViewDistanceQualityAsName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"IsFullscreen",(Native)&UScalabilityFunctionLibrary::execIsFullscreen);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"IsVSyncEnabled",(Native)&UScalabilityFunctionLibrary::execIsVSyncEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"RevertVideoMode",(Native)&UScalabilityFunctionLibrary::execRevertVideoMode);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SaveVideoModeAndQuality",(Native)&UScalabilityFunctionLibrary::execSaveVideoModeAndQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetAntiAliasingQuality",(Native)&UScalabilityFunctionLibrary::execSetAntiAliasingQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetAntiAliasingQualityByName",(Native)&UScalabilityFunctionLibrary::execSetAntiAliasingQualityByName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetEffectsQuality",(Native)&UScalabilityFunctionLibrary::execSetEffectsQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetEffectsQualityByName",(Native)&UScalabilityFunctionLibrary::execSetEffectsQualityByName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetOverallVideoQualityByLevel",(Native)&UScalabilityFunctionLibrary::execSetOverallVideoQualityByLevel);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetPostProcessQuality",(Native)&UScalabilityFunctionLibrary::execSetPostProcessQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetPostProcessQualityByName",(Native)&UScalabilityFunctionLibrary::execSetPostProcessQualityByName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetResolutionScale",(Native)&UScalabilityFunctionLibrary::execSetResolutionScale);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetScreenResolution",(Native)&UScalabilityFunctionLibrary::execSetScreenResolution);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetShadowQuality",(Native)&UScalabilityFunctionLibrary::execSetShadowQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetShadowQualityByName",(Native)&UScalabilityFunctionLibrary::execSetShadowQualityByName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetTextureQuality",(Native)&UScalabilityFunctionLibrary::execSetTextureQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetTextureQualityByName",(Native)&UScalabilityFunctionLibrary::execSetTextureQualityByName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetVideoQualitySettings",(Native)&UScalabilityFunctionLibrary::execSetVideoQualitySettings);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetViewDistanceQuality",(Native)&UScalabilityFunctionLibrary::execSetViewDistanceQuality);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetViewDistanceQualityByName",(Native)&UScalabilityFunctionLibrary::execSetViewDistanceQualityByName);
		FNativeFunctionRegistrar::RegisterFunction(UScalabilityFunctionLibrary::StaticClass(),"SetVSyncEnabled",(Native)&UScalabilityFunctionLibrary::execSetVSyncEnabled);
	}
	IMPLEMENT_CLASS(UScalabilityFunctionLibrary, 22705534);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	SCALABILITYLIBRARY_API class UEnum* Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_AutoSetQualityLevel();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_ChangeScreenResolution();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQualityAsName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQualityAsName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQualityAsName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetResolutionScale();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetScreenResolution();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQualityAsName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetSupportedScreenResolutions();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQualityAsName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetVideoQualitySettings();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQualityAsName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_IsFullscreen();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_IsVSyncEnabled();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_RevertVideoMode();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SaveVideoModeAndQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQualityByName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQualityByName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetOverallVideoQualityByLevel();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQualityByName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetResolutionScale();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetScreenResolution();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQualityByName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQualityByName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVideoQualitySettings();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQuality();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQualityByName();
	SCALABILITYLIBRARY_API class UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVSyncEnabled();
	SCALABILITYLIBRARY_API class UClass* Z_Construct_UClass_UScalabilityFunctionLibrary_NoRegister();
	SCALABILITYLIBRARY_API class UClass* Z_Construct_UClass_UScalabilityFunctionLibrary();
	SCALABILITYLIBRARY_API class UPackage* Z_Construct_UPackage_ScalabilityLibrary();
	UEnum* Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel()
	{
		UPackage* Outer=Z_Construct_UPackage_ScalabilityLibrary();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENamedScalabilityLevel"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENamedScalabilityLevel::SL_LOW")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENamedScalabilityLevel::SL_MED")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENamedScalabilityLevel::SL_HIGH")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENamedScalabilityLevel::SL_EPIC")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENamedScalabilityLevel::SL_NUM")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENamedScalabilityLevel::SL_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SL_EPIC.DisplayName"), TEXT("Epic"));
			MetaData->SetValue(ReturnEnum, TEXT("SL_HIGH.DisplayName"), TEXT("High"));
			MetaData->SetValue(ReturnEnum, TEXT("SL_LOW.DisplayName"), TEXT("Low"));
			MetaData->SetValue(ReturnEnum, TEXT("SL_MED.DisplayName"), TEXT("Medium"));
			MetaData->SetValue(ReturnEnum, TEXT("SL_NUM.Hidden"), TEXT(""));
#endif
		}
		return ReturnEnum;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_AutoSetQualityLevel()
	{
		struct ScalabilityFunctionLibrary_eventAutoSetQualityLevel_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AutoSetQualityLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventAutoSetQualityLevel_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventAutoSetQualityLevel_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventAutoSetQualityLevel_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventAutoSetQualityLevel_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Autodetects and sets all quality settings by running hardware benchmark."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_ChangeScreenResolution()
	{
		struct ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms
		{
			int32 Width;
			int32 Height;
			bool Fullscreen;
			bool WindowedFullScreen;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeScreenResolution"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(WindowedFullScreen, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms, bool);
			UProperty* NewProp_WindowedFullScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WindowedFullScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(WindowedFullScreen, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(WindowedFullScreen, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Fullscreen, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms, bool);
			UProperty* NewProp_Fullscreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Fullscreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Fullscreen, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), 0x0000000000000082, CPP_BOOL_PROPERTY_BITMASK(Fullscreen, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), sizeof(bool), true);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), 0x0000000000000082);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, ScalabilityFunctionLibrary_eventChangeScreenResolution_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stores the current screen resolution if in full screen, or the window size if not."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQuality()
	{
		struct ScalabilityFunctionLibrary_eventGetAntiAliasingQuality_Parms
		{
			int32 AntiAliasingQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAntiAliasingQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetAntiAliasingQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetAntiAliasingQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetAntiAliasingQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetAntiAliasingQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_AntiAliasingQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AntiAliasingQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AntiAliasingQuality, ScalabilityFunctionLibrary_eventGetAntiAliasingQuality_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current anti-aliasing quality level as a number, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQualityAsName()
	{
		struct ScalabilityFunctionLibrary_eventGetAntiAliasingQualityAsName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> AntiAliasingQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAntiAliasingQualityAsName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetAntiAliasingQualityAsName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetAntiAliasingQualityAsName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetAntiAliasingQualityAsName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetAntiAliasingQualityAsName_Parms), sizeof(bool), true);
			UProperty* NewProp_AntiAliasingQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AntiAliasingQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AntiAliasingQuality, ScalabilityFunctionLibrary_eventGetAntiAliasingQualityAsName_Parms), 0x0000000000000180, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current anti-aliasing quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQuality()
	{
		struct ScalabilityFunctionLibrary_eventGetEffectsQuality_Parms
		{
			int32 EffectsQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEffectsQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetEffectsQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetEffectsQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetEffectsQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetEffectsQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_EffectsQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectsQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EffectsQuality, ScalabilityFunctionLibrary_eventGetEffectsQuality_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current effects quality level as a number, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQualityAsName()
	{
		struct ScalabilityFunctionLibrary_eventGetEffectsQualityAsName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> EffectsQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEffectsQualityAsName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetEffectsQualityAsName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetEffectsQualityAsName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetEffectsQualityAsName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetEffectsQualityAsName_Parms), sizeof(bool), true);
			UProperty* NewProp_EffectsQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectsQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EffectsQuality, ScalabilityFunctionLibrary_eventGetEffectsQualityAsName_Parms), 0x0000000000000180, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current effects quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQuality()
	{
		struct ScalabilityFunctionLibrary_eventGetPostProcessQuality_Parms
		{
			int32 PostProcessQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPostProcessQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetPostProcessQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetPostProcessQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetPostProcessQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetPostProcessQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_PostProcessQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PostProcessQuality, ScalabilityFunctionLibrary_eventGetPostProcessQuality_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current post-process quality level as a number, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQualityAsName()
	{
		struct ScalabilityFunctionLibrary_eventGetPostProcessQualityAsName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> PostProcessQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPostProcessQualityAsName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetPostProcessQualityAsName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetPostProcessQualityAsName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetPostProcessQualityAsName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetPostProcessQualityAsName_Parms), sizeof(bool), true);
			UProperty* NewProp_PostProcessQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PostProcessQuality, ScalabilityFunctionLibrary_eventGetPostProcessQualityAsName_Parms), 0x0000000000000180, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current post-process quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetResolutionScale()
	{
		struct ScalabilityFunctionLibrary_eventGetResolutionScale_Parms
		{
			int32 ResolutionScale;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetResolutionScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetResolutionScale_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetResolutionScale_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetResolutionScale_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetResolutionScale_Parms), sizeof(bool), true);
			UProperty* NewProp_ResolutionScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResolutionScale"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResolutionScale, ScalabilityFunctionLibrary_eventGetResolutionScale_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current resolution scale. Will be a value from 1-100 representing the percentage of the current screen or window size that the engine is currently rendering at. Lower numbers decrease quality but increase performance."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetScreenResolution()
	{
		struct ScalabilityFunctionLibrary_eventGetScreenResolution_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetScreenResolution"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetScreenResolution_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, ScalabilityFunctionLibrary_eventGetScreenResolution_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current screen resolution as a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQuality()
	{
		struct ScalabilityFunctionLibrary_eventGetShadowQuality_Parms
		{
			int32 ShadowQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetShadowQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetShadowQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetShadowQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetShadowQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetShadowQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_ShadowQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShadowQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ShadowQuality, ScalabilityFunctionLibrary_eventGetShadowQuality_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current shadow quality level as a number, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQualityAsName()
	{
		struct ScalabilityFunctionLibrary_eventGetShadowQualityAsName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> ShadowQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetShadowQualityAsName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetShadowQualityAsName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetShadowQualityAsName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetShadowQualityAsName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetShadowQualityAsName_Parms), sizeof(bool), true);
			UProperty* NewProp_ShadowQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShadowQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ShadowQuality, ScalabilityFunctionLibrary_eventGetShadowQualityAsName_Parms), 0x0000000000000180, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current shadow quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetSupportedScreenResolutions()
	{
		struct ScalabilityFunctionLibrary_eventGetSupportedScreenResolutions_Parms
		{
			TArray<FString> Resolutions;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSupportedScreenResolutions"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetSupportedScreenResolutions_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetSupportedScreenResolutions_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetSupportedScreenResolutions_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetSupportedScreenResolutions_Parms), sizeof(bool), true);
			UProperty* NewProp_Resolutions = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Resolutions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Resolutions, ScalabilityFunctionLibrary_eventGetSupportedScreenResolutions_Parms), 0x0000000000000180);
			UProperty* NewProp_Resolutions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Resolutions, TEXT("Resolutions"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Provides a list of supported screen resolutions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQuality()
	{
		struct ScalabilityFunctionLibrary_eventGetTextureQuality_Parms
		{
			int32 TextureQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTextureQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetTextureQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetTextureQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetTextureQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetTextureQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_TextureQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TextureQuality, ScalabilityFunctionLibrary_eventGetTextureQuality_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current texture quality level as a number, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQualityAsName()
	{
		struct ScalabilityFunctionLibrary_eventGetTextureQualityAsName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> TextureQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTextureQualityAsName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetTextureQualityAsName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetTextureQualityAsName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetTextureQualityAsName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetTextureQualityAsName_Parms), sizeof(bool), true);
			UProperty* NewProp_TextureQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TextureQuality, ScalabilityFunctionLibrary_eventGetTextureQualityAsName_Parms), 0x0000000000000180, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current texture quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetVideoQualitySettings()
	{
		struct ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms
		{
			int32 AntiAliasing;
			int32 Effects;
			int32 PostProcess;
			int32 Shadow;
			int32 Texture;
			int32 ViewDistance;
			int32 ResolutionScale;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVideoQualitySettings"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), sizeof(bool), true);
			UProperty* NewProp_ResolutionScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResolutionScale"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResolutionScale, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			UProperty* NewProp_ViewDistance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewDistance"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ViewDistance, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Texture, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			UProperty* NewProp_Shadow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Shadow"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Shadow, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			UProperty* NewProp_PostProcess = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcess"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PostProcess, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			UProperty* NewProp_Effects = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Effects"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Effects, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			UProperty* NewProp_AntiAliasing = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AntiAliasing"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AntiAliasing, ScalabilityFunctionLibrary_eventGetVideoQualitySettings_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gives access to all of the scalability settings at once. These are all based on a scale of 0-3 (0 being worst, 3 being best), except resolution which uses the scall 0-100 and represents a percentage of the current window or screen resolution."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQuality()
	{
		struct ScalabilityFunctionLibrary_eventGetViewDistanceQuality_Parms
		{
			int32 ViewDistanceQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewDistanceQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetViewDistanceQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetViewDistanceQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetViewDistanceQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetViewDistanceQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_ViewDistanceQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewDistanceQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ViewDistanceQuality, ScalabilityFunctionLibrary_eventGetViewDistanceQuality_Parms), 0x0000000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current view distance quality level as a number, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQualityAsName()
	{
		struct ScalabilityFunctionLibrary_eventGetViewDistanceQualityAsName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> ViewDistanceQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewDistanceQualityAsName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(ScalabilityFunctionLibrary_eventGetViewDistanceQualityAsName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventGetViewDistanceQualityAsName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventGetViewDistanceQualityAsName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventGetViewDistanceQualityAsName_Parms), sizeof(bool), true);
			UProperty* NewProp_ViewDistanceQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewDistanceQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ViewDistanceQuality, ScalabilityFunctionLibrary_eventGetViewDistanceQualityAsName_Parms), 0x0000000000000180, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the current view distance quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_IsFullscreen()
	{
		struct ScalabilityFunctionLibrary_eventIsFullscreen_Parms
		{
			bool bIsFullScreen;
			bool bIsWindowedFullScreen;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsFullscreen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(ScalabilityFunctionLibrary_eventIsFullscreen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventIsFullscreen_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventIsFullscreen_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventIsFullscreen_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsWindowedFullScreen, ScalabilityFunctionLibrary_eventIsFullscreen_Parms, bool);
			UProperty* NewProp_bIsWindowedFullScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsWindowedFullScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsWindowedFullScreen, ScalabilityFunctionLibrary_eventIsFullscreen_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(bIsWindowedFullScreen, ScalabilityFunctionLibrary_eventIsFullscreen_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFullScreen, ScalabilityFunctionLibrary_eventIsFullscreen_Parms, bool);
			UProperty* NewProp_bIsFullScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsFullScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFullScreen, ScalabilityFunctionLibrary_eventIsFullscreen_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(bIsFullScreen, ScalabilityFunctionLibrary_eventIsFullscreen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Detects if we're currently in full screen mode"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_IsVSyncEnabled()
	{
		struct ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms
		{
			bool VSyncEnabled;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsVSyncEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VSyncEnabled, ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms, bool);
			UProperty* NewProp_VSyncEnabled = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VSyncEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VSyncEnabled, ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(VSyncEnabled, ScalabilityFunctionLibrary_eventIsVSyncEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Identifies whether v-sync is on or off"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_RevertVideoMode()
	{
		struct ScalabilityFunctionLibrary_eventRevertVideoMode_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RevertVideoMode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventRevertVideoMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventRevertVideoMode_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventRevertVideoMode_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventRevertVideoMode_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Reverts video settings to the default values provided in DefaultGameUserSettings.ini"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SaveVideoModeAndQuality()
	{
		struct ScalabilityFunctionLibrary_eventSaveVideoModeAndQuality_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SaveVideoModeAndQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSaveVideoModeAndQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSaveVideoModeAndQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSaveVideoModeAndQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSaveVideoModeAndQuality_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Confirm and save current video mode (resolution and fullscreen/windowed) as well as quality settings"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQuality()
	{
		struct ScalabilityFunctionLibrary_eventSetAntiAliasingQuality_Parms
		{
			int32 AntiAliasingQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAntiAliasingQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetAntiAliasingQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetAntiAliasingQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetAntiAliasingQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetAntiAliasingQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_AntiAliasingQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AntiAliasingQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AntiAliasingQuality, ScalabilityFunctionLibrary_eventSetAntiAliasingQuality_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anti-aliasing quality level, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQualityByName()
	{
		struct ScalabilityFunctionLibrary_eventSetAntiAliasingQualityByName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> AntiAliasingQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAntiAliasingQualityByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetAntiAliasingQualityByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetAntiAliasingQualityByName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetAntiAliasingQualityByName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetAntiAliasingQualityByName_Parms), sizeof(bool), true);
			UProperty* NewProp_AntiAliasingQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AntiAliasingQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(AntiAliasingQuality, ScalabilityFunctionLibrary_eventSetAntiAliasingQualityByName_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anti-aliasing quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQuality()
	{
		struct ScalabilityFunctionLibrary_eventSetEffectsQuality_Parms
		{
			int32 EffectsQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEffectsQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetEffectsQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetEffectsQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetEffectsQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetEffectsQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_EffectsQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectsQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(EffectsQuality, ScalabilityFunctionLibrary_eventSetEffectsQuality_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the effects quality level, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQualityByName()
	{
		struct ScalabilityFunctionLibrary_eventSetEffectsQualityByName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> EffectsQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEffectsQualityByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetEffectsQualityByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetEffectsQualityByName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetEffectsQualityByName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetEffectsQualityByName_Parms), sizeof(bool), true);
			UProperty* NewProp_EffectsQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectsQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EffectsQuality, ScalabilityFunctionLibrary_eventSetEffectsQualityByName_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the effects quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetOverallVideoQualityByLevel()
	{
		struct ScalabilityFunctionLibrary_eventSetOverallVideoQualityByLevel_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> NewLevel;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOverallVideoQualityByLevel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetOverallVideoQualityByLevel_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetOverallVideoQualityByLevel_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetOverallVideoQualityByLevel_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetOverallVideoQualityByLevel_Parms), sizeof(bool), true);
			UProperty* NewProp_NewLevel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewLevel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(NewLevel, ScalabilityFunctionLibrary_eventSetOverallVideoQualityByLevel_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set's video quality based on a named scalability level: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQuality()
	{
		struct ScalabilityFunctionLibrary_eventSetPostProcessQuality_Parms
		{
			int32 PostProcessQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPostProcessQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetPostProcessQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetPostProcessQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetPostProcessQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetPostProcessQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_PostProcessQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PostProcessQuality, ScalabilityFunctionLibrary_eventSetPostProcessQuality_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the effects post-process level, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQualityByName()
	{
		struct ScalabilityFunctionLibrary_eventSetPostProcessQualityByName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> PostProcessQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPostProcessQualityByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetPostProcessQualityByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetPostProcessQualityByName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetPostProcessQualityByName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetPostProcessQualityByName_Parms), sizeof(bool), true);
			UProperty* NewProp_PostProcessQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcessQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PostProcessQuality, ScalabilityFunctionLibrary_eventSetPostProcessQualityByName_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the post-process quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetResolutionScale()
	{
		struct ScalabilityFunctionLibrary_eventSetResolutionScale_Parms
		{
			int32 ResolutionScale;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetResolutionScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetResolutionScale_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetResolutionScale_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetResolutionScale_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetResolutionScale_Parms), sizeof(bool), true);
			UProperty* NewProp_ResolutionScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResolutionScale"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResolutionScale, ScalabilityFunctionLibrary_eventSetResolutionScale_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the current resolution scale. Should be value from 1-100, though you would rarely want to go lower than 50.  Represents the percentage of the current screen or window size that the engine is currently rendering at. Lower numbers decrease quality but increase performance."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetScreenResolution()
	{
		struct ScalabilityFunctionLibrary_eventSetScreenResolution_Parms
		{
			int32 Width;
			int32 Height;
			bool Fullscreen;
			bool WindowedFullScreen;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScreenResolution"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetScreenResolution_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(WindowedFullScreen, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms, bool);
			UProperty* NewProp_WindowedFullScreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WindowedFullScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(WindowedFullScreen, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(WindowedFullScreen, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Fullscreen, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms, bool);
			UProperty* NewProp_Fullscreen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Fullscreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Fullscreen, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), 0x0000000000000082, CPP_BOOL_PROPERTY_BITMASK(Fullscreen, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), sizeof(bool), true);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), 0x0000000000000082);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, ScalabilityFunctionLibrary_eventSetScreenResolution_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stores current resolution window mode in settings"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQuality()
	{
		struct ScalabilityFunctionLibrary_eventSetShadowQuality_Parms
		{
			int32 ShadowQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShadowQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetShadowQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetShadowQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetShadowQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetShadowQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_ShadowQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShadowQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ShadowQuality, ScalabilityFunctionLibrary_eventSetShadowQuality_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the shadow quality level, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQualityByName()
	{
		struct ScalabilityFunctionLibrary_eventSetShadowQualityByName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> ShadowQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShadowQualityByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetShadowQualityByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetShadowQualityByName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetShadowQualityByName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetShadowQualityByName_Parms), sizeof(bool), true);
			UProperty* NewProp_ShadowQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShadowQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ShadowQuality, ScalabilityFunctionLibrary_eventSetShadowQualityByName_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the shadow quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQuality()
	{
		struct ScalabilityFunctionLibrary_eventSetTextureQuality_Parms
		{
			int32 TextureQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTextureQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetTextureQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetTextureQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetTextureQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetTextureQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_TextureQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TextureQuality, ScalabilityFunctionLibrary_eventSetTextureQuality_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the texture quality level, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQualityByName()
	{
		struct ScalabilityFunctionLibrary_eventSetTextureQualityByName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> TextureQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTextureQualityByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetTextureQualityByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetTextureQualityByName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetTextureQualityByName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetTextureQualityByName_Parms), sizeof(bool), true);
			UProperty* NewProp_TextureQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TextureQuality, ScalabilityFunctionLibrary_eventSetTextureQualityByName_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the texture quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVideoQualitySettings()
	{
		struct ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms
		{
			int32 AntiAliasing;
			int32 Effects;
			int32 PostProcess;
			int32 Shadow;
			int32 Texture;
			int32 ViewDistance;
			int32 ResolutionScale;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVideoQualitySettings"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), sizeof(bool), true);
			UProperty* NewProp_ResolutionScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResolutionScale"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ResolutionScale, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			UProperty* NewProp_ViewDistance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewDistance"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ViewDistance, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Texture, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			UProperty* NewProp_Shadow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Shadow"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Shadow, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			UProperty* NewProp_PostProcess = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PostProcess"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PostProcess, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			UProperty* NewProp_Effects = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Effects"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Effects, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			UProperty* NewProp_AntiAliasing = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AntiAliasing"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AntiAliasing, ScalabilityFunctionLibrary_eventSetVideoQualitySettings_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AntiAliasing"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Effects"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PostProcess"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ResolutionScale"), TEXT("100"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Shadow"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Texture"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ViewDistance"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets video quality setting values. These are all based on a scale of 0-3 (0 being worst, 3 being best), except resolution which uses the scall 0-100 and represents a percentage of the current window or screen resolution. Unconnected pins will use the default value of -1, which will leave the setting at its current value."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQuality()
	{
		struct ScalabilityFunctionLibrary_eventSetViewDistanceQuality_Parms
		{
			int32 ViewDistanceQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetViewDistanceQuality"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetViewDistanceQuality_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetViewDistanceQuality_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetViewDistanceQuality_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetViewDistanceQuality_Parms), sizeof(bool), true);
			UProperty* NewProp_ViewDistanceQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewDistanceQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ViewDistanceQuality, ScalabilityFunctionLibrary_eventSetViewDistanceQuality_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the view distance quality level, 0-3"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQualityByName()
	{
		struct ScalabilityFunctionLibrary_eventSetViewDistanceQualityByName_Parms
		{
			TEnumAsByte<ENamedScalabilityLevel> ViewDistanceQuality;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetViewDistanceQualityByName"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetViewDistanceQualityByName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetViewDistanceQualityByName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetViewDistanceQualityByName_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetViewDistanceQualityByName_Parms), sizeof(bool), true);
			UProperty* NewProp_ViewDistanceQuality = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewDistanceQuality"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ViewDistanceQuality, ScalabilityFunctionLibrary_eventSetViewDistanceQualityByName_Parms), 0x0000000000000082, Z_Construct_UEnum_ScalabilityLibrary_ENamedScalabilityLevel());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the view distance quality level by name: low, medium, high, or epic"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVSyncEnabled()
	{
		struct ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms
		{
			bool VSync;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScalabilityFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVSyncEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(VSync, ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms, bool);
			UProperty* NewProp_VSync = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VSync"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VSync, ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms), 0x0000000000000082, CPP_BOOL_PROPERTY_BITMASK(VSync, ScalabilityFunctionLibrary_eventSetVSyncEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scalability"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Turn vsync on or off"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScalabilityFunctionLibrary_NoRegister()
	{
		return UScalabilityFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UScalabilityFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_ScalabilityLibrary();
			OuterClass = UScalabilityFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_AutoSetQualityLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_ChangeScreenResolution());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQualityAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQualityAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQualityAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetResolutionScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetScreenResolution());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQualityAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetSupportedScreenResolutions());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQualityAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetVideoQualitySettings());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQualityAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_IsFullscreen());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_IsVSyncEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_RevertVideoMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SaveVideoModeAndQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQualityByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQualityByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetOverallVideoQualityByLevel());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQualityByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetResolutionScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetScreenResolution());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQualityByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQualityByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVideoQualitySettings());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQuality());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQualityByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVSyncEnabled());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_AutoSetQualityLevel()); // 1539059991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_ChangeScreenResolution()); // 3317418422
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQuality()); // 317997450
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetAntiAliasingQualityAsName()); // 1315808748
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQuality()); // 1172123009
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetEffectsQualityAsName()); // 3650587230
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQuality()); // 864710369
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetPostProcessQualityAsName()); // 1651911954
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetResolutionScale()); // 2838592997
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetScreenResolution()); // 3556493924
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQuality()); // 151430306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetShadowQualityAsName()); // 3642842130
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetSupportedScreenResolutions()); // 4107710430
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQuality()); // 564190778
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetTextureQualityAsName()); // 4167486765
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetVideoQualitySettings()); // 3144099864
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQuality()); // 56741669
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_GetViewDistanceQualityAsName()); // 2723527498
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_IsFullscreen()); // 508205215
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_IsVSyncEnabled()); // 2249293768
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_RevertVideoMode()); // 3623166981
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SaveVideoModeAndQuality()); // 3127967815
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQuality()); // 3433155550
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetAntiAliasingQualityByName()); // 2687867386
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQuality()); // 1688871143
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetEffectsQualityByName()); // 3850433455
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetOverallVideoQualityByLevel()); // 4212422546
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQuality()); // 221678592
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetPostProcessQualityByName()); // 2201426700
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetResolutionScale()); // 3402873899
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetScreenResolution()); // 3474801668
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQuality()); // 2160073715
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetShadowQualityByName()); // 2293274633
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQuality()); // 2005998777
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetTextureQualityByName()); // 1784422523
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVideoQualitySettings()); // 775682812
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQuality()); // 3504845319
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetViewDistanceQualityByName()); // 2281508802
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScalabilityFunctionLibrary_SetVSyncEnabled()); // 4039258167
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ScalabilityFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ScalabilityFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScalabilityFunctionLibrary(Z_Construct_UClass_UScalabilityFunctionLibrary, TEXT("UScalabilityFunctionLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScalabilityFunctionLibrary);
	UPackage* Z_Construct_UPackage_ScalabilityLibrary()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/ScalabilityLibrary")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0xD0CEE7FD;
			Guid.B = 0x5546512F;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
