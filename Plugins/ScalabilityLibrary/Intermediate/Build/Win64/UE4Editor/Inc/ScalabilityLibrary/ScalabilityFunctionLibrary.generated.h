// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#ifdef SCALABILITYLIBRARY_ScalabilityFunctionLibrary_generated_h
#error "ScalabilityFunctionLibrary.generated.h already included, missing '#pragma once' in ScalabilityFunctionLibrary.h"
#endif
#define SCALABILITYLIBRARY_ScalabilityFunctionLibrary_generated_h

#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execAutoSetQualityLevel) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::AutoSetQualityLevel(); \
	} \
 \
	DECLARE_FUNCTION(execSetOverallVideoQualityByLevel) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewLevel); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetOverallVideoQualityByLevel(ENamedScalabilityLevel(Z_Param_NewLevel)); \
	} \
 \
	DECLARE_FUNCTION(execRevertVideoMode) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::RevertVideoMode(); \
	} \
 \
	DECLARE_FUNCTION(execSaveVideoModeAndQuality) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SaveVideoModeAndQuality(); \
	} \
 \
	DECLARE_FUNCTION(execSetVSyncEnabled) \
	{ \
		P_GET_UBOOL(Z_Param_VSync); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetVSyncEnabled(Z_Param_VSync); \
	} \
 \
	DECLARE_FUNCTION(execIsVSyncEnabled) \
	{ \
		P_GET_UBOOL_REF(Z_Param_Out_VSyncEnabled); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::IsVSyncEnabled(Z_Param_Out_VSyncEnabled); \
	} \
 \
	DECLARE_FUNCTION(execSetResolutionScale) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetResolutionScale(Z_Param_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execGetResolutionScale) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetResolutionScale(Z_Param_Out_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execSetViewDistanceQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetViewDistanceQualityByName(ENamedScalabilityLevel(Z_Param_ViewDistanceQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetViewDistanceQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetViewDistanceQuality(Z_Param_ViewDistanceQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetViewDistanceQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetViewDistanceQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_ViewDistanceQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetViewDistanceQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetViewDistanceQuality(Z_Param_Out_ViewDistanceQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetTextureQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetTextureQualityByName(ENamedScalabilityLevel(Z_Param_TextureQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetTextureQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetTextureQuality(Z_Param_TextureQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetTextureQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetTextureQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_TextureQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetTextureQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetTextureQuality(Z_Param_Out_TextureQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetShadowQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetShadowQualityByName(ENamedScalabilityLevel(Z_Param_ShadowQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetShadowQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetShadowQuality(Z_Param_ShadowQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetShadowQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetShadowQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_ShadowQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetShadowQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetShadowQuality(Z_Param_Out_ShadowQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetPostProcessQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetPostProcessQualityByName(ENamedScalabilityLevel(Z_Param_PostProcessQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetPostProcessQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetPostProcessQuality(Z_Param_PostProcessQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetPostProcessQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetPostProcessQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_PostProcessQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetPostProcessQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetPostProcessQuality(Z_Param_Out_PostProcessQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetEffectsQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetEffectsQualityByName(ENamedScalabilityLevel(Z_Param_EffectsQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetEffectsQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetEffectsQuality(Z_Param_EffectsQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetEffectsQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetEffectsQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_EffectsQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetEffectsQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetEffectsQuality(Z_Param_Out_EffectsQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetAntiAliasingQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetAntiAliasingQualityByName(ENamedScalabilityLevel(Z_Param_AntiAliasingQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetAntiAliasingQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetAntiAliasingQuality(Z_Param_AntiAliasingQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetAntiAliasingQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetAntiAliasingQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_AntiAliasingQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetAntiAliasingQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetAntiAliasingQuality(Z_Param_Out_AntiAliasingQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetVideoQualitySettings) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_AntiAliasing); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Effects); \
		P_GET_PROPERTY(UIntProperty,Z_Param_PostProcess); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Shadow); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Texture); \
		P_GET_PROPERTY(UIntProperty,Z_Param_ViewDistance); \
		P_GET_PROPERTY(UIntProperty,Z_Param_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetVideoQualitySettings(Z_Param_AntiAliasing,Z_Param_Effects,Z_Param_PostProcess,Z_Param_Shadow,Z_Param_Texture,Z_Param_ViewDistance,Z_Param_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execGetVideoQualitySettings) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_AntiAliasing); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_Effects); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_PostProcess); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_Shadow); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_Texture); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ViewDistance); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetVideoQualitySettings(Z_Param_Out_AntiAliasing,Z_Param_Out_Effects,Z_Param_Out_PostProcess,Z_Param_Out_Shadow,Z_Param_Out_Texture,Z_Param_Out_ViewDistance,Z_Param_Out_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execChangeScreenResolution) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Width); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Height); \
		P_GET_UBOOL(Z_Param_Fullscreen); \
		P_GET_UBOOL(Z_Param_WindowedFullScreen); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::ChangeScreenResolution(Z_Param_Width,Z_Param_Height,Z_Param_Fullscreen,Z_Param_WindowedFullScreen); \
	} \
 \
	DECLARE_FUNCTION(execSetScreenResolution) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Width); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Height); \
		P_GET_UBOOL(Z_Param_Fullscreen); \
		P_GET_UBOOL(Z_Param_WindowedFullScreen); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetScreenResolution(Z_Param_Width,Z_Param_Height,Z_Param_Fullscreen,Z_Param_WindowedFullScreen); \
	} \
 \
	DECLARE_FUNCTION(execIsFullscreen) \
	{ \
		P_GET_UBOOL_REF(Z_Param_Out_bIsFullScreen); \
		P_GET_UBOOL_REF(Z_Param_Out_bIsWindowedFullScreen); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::IsFullscreen(Z_Param_Out_bIsFullScreen,Z_Param_Out_bIsWindowedFullScreen); \
	} \
 \
	DECLARE_FUNCTION(execGetScreenResolution) \
	{ \
		P_FINISH; \
		*(FString*)Z_Param__Result=UScalabilityFunctionLibrary::GetScreenResolution(); \
	} \
 \
	DECLARE_FUNCTION(execGetSupportedScreenResolutions) \
	{ \
		P_GET_TARRAY_REF(FString,Z_Param_Out_Resolutions); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetSupportedScreenResolutions(Z_Param_Out_Resolutions); \
	}


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execAutoSetQualityLevel) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::AutoSetQualityLevel(); \
	} \
 \
	DECLARE_FUNCTION(execSetOverallVideoQualityByLevel) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewLevel); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetOverallVideoQualityByLevel(ENamedScalabilityLevel(Z_Param_NewLevel)); \
	} \
 \
	DECLARE_FUNCTION(execRevertVideoMode) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::RevertVideoMode(); \
	} \
 \
	DECLARE_FUNCTION(execSaveVideoModeAndQuality) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SaveVideoModeAndQuality(); \
	} \
 \
	DECLARE_FUNCTION(execSetVSyncEnabled) \
	{ \
		P_GET_UBOOL(Z_Param_VSync); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetVSyncEnabled(Z_Param_VSync); \
	} \
 \
	DECLARE_FUNCTION(execIsVSyncEnabled) \
	{ \
		P_GET_UBOOL_REF(Z_Param_Out_VSyncEnabled); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::IsVSyncEnabled(Z_Param_Out_VSyncEnabled); \
	} \
 \
	DECLARE_FUNCTION(execSetResolutionScale) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetResolutionScale(Z_Param_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execGetResolutionScale) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetResolutionScale(Z_Param_Out_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execSetViewDistanceQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetViewDistanceQualityByName(ENamedScalabilityLevel(Z_Param_ViewDistanceQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetViewDistanceQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetViewDistanceQuality(Z_Param_ViewDistanceQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetViewDistanceQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetViewDistanceQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_ViewDistanceQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetViewDistanceQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ViewDistanceQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetViewDistanceQuality(Z_Param_Out_ViewDistanceQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetTextureQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetTextureQualityByName(ENamedScalabilityLevel(Z_Param_TextureQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetTextureQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetTextureQuality(Z_Param_TextureQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetTextureQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetTextureQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_TextureQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetTextureQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_TextureQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetTextureQuality(Z_Param_Out_TextureQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetShadowQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetShadowQualityByName(ENamedScalabilityLevel(Z_Param_ShadowQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetShadowQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetShadowQuality(Z_Param_ShadowQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetShadowQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetShadowQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_ShadowQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetShadowQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ShadowQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetShadowQuality(Z_Param_Out_ShadowQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetPostProcessQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetPostProcessQualityByName(ENamedScalabilityLevel(Z_Param_PostProcessQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetPostProcessQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetPostProcessQuality(Z_Param_PostProcessQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetPostProcessQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetPostProcessQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_PostProcessQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetPostProcessQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_PostProcessQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetPostProcessQuality(Z_Param_Out_PostProcessQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetEffectsQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetEffectsQualityByName(ENamedScalabilityLevel(Z_Param_EffectsQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetEffectsQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetEffectsQuality(Z_Param_EffectsQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetEffectsQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetEffectsQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_EffectsQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetEffectsQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_EffectsQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetEffectsQuality(Z_Param_Out_EffectsQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetAntiAliasingQualityByName) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->SetAntiAliasingQualityByName(ENamedScalabilityLevel(Z_Param_AntiAliasingQuality)); \
	} \
 \
	DECLARE_FUNCTION(execSetAntiAliasingQuality) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetAntiAliasingQuality(Z_Param_AntiAliasingQuality); \
	} \
 \
	DECLARE_FUNCTION(execGetAntiAliasingQualityAsName) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Z_Param_Out_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetAntiAliasingQualityAsName((ENamedScalabilityLevel&)(Z_Param_Out_AntiAliasingQuality)); \
	} \
 \
	DECLARE_FUNCTION(execGetAntiAliasingQuality) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_AntiAliasingQuality); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetAntiAliasingQuality(Z_Param_Out_AntiAliasingQuality); \
	} \
 \
	DECLARE_FUNCTION(execSetVideoQualitySettings) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_AntiAliasing); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Effects); \
		P_GET_PROPERTY(UIntProperty,Z_Param_PostProcess); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Shadow); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Texture); \
		P_GET_PROPERTY(UIntProperty,Z_Param_ViewDistance); \
		P_GET_PROPERTY(UIntProperty,Z_Param_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetVideoQualitySettings(Z_Param_AntiAliasing,Z_Param_Effects,Z_Param_PostProcess,Z_Param_Shadow,Z_Param_Texture,Z_Param_ViewDistance,Z_Param_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execGetVideoQualitySettings) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_AntiAliasing); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_Effects); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_PostProcess); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_Shadow); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_Texture); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ViewDistance); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_ResolutionScale); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetVideoQualitySettings(Z_Param_Out_AntiAliasing,Z_Param_Out_Effects,Z_Param_Out_PostProcess,Z_Param_Out_Shadow,Z_Param_Out_Texture,Z_Param_Out_ViewDistance,Z_Param_Out_ResolutionScale); \
	} \
 \
	DECLARE_FUNCTION(execChangeScreenResolution) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Width); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Height); \
		P_GET_UBOOL(Z_Param_Fullscreen); \
		P_GET_UBOOL(Z_Param_WindowedFullScreen); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::ChangeScreenResolution(Z_Param_Width,Z_Param_Height,Z_Param_Fullscreen,Z_Param_WindowedFullScreen); \
	} \
 \
	DECLARE_FUNCTION(execSetScreenResolution) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Width); \
		P_GET_PROPERTY(UIntProperty,Z_Param_Height); \
		P_GET_UBOOL(Z_Param_Fullscreen); \
		P_GET_UBOOL(Z_Param_WindowedFullScreen); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::SetScreenResolution(Z_Param_Width,Z_Param_Height,Z_Param_Fullscreen,Z_Param_WindowedFullScreen); \
	} \
 \
	DECLARE_FUNCTION(execIsFullscreen) \
	{ \
		P_GET_UBOOL_REF(Z_Param_Out_bIsFullScreen); \
		P_GET_UBOOL_REF(Z_Param_Out_bIsWindowedFullScreen); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::IsFullscreen(Z_Param_Out_bIsFullScreen,Z_Param_Out_bIsWindowedFullScreen); \
	} \
 \
	DECLARE_FUNCTION(execGetScreenResolution) \
	{ \
		P_FINISH; \
		*(FString*)Z_Param__Result=UScalabilityFunctionLibrary::GetScreenResolution(); \
	} \
 \
	DECLARE_FUNCTION(execGetSupportedScreenResolutions) \
	{ \
		P_GET_TARRAY_REF(FString,Z_Param_Out_Resolutions); \
		P_FINISH; \
		*(bool*)Z_Param__Result=UScalabilityFunctionLibrary::GetSupportedScreenResolutions(Z_Param_Out_Resolutions); \
	}


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUScalabilityFunctionLibrary(); \
	friend SCALABILITYLIBRARY_API class UClass* Z_Construct_UClass_UScalabilityFunctionLibrary(); \
	public: \
	DECLARE_CLASS(UScalabilityFunctionLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/ScalabilityLibrary"), NO_API) \
	DECLARE_SERIALIZER(UScalabilityFunctionLibrary) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_INCLASS \
	private: \
	static void StaticRegisterNativesUScalabilityFunctionLibrary(); \
	friend SCALABILITYLIBRARY_API class UClass* Z_Construct_UClass_UScalabilityFunctionLibrary(); \
	public: \
	DECLARE_CLASS(UScalabilityFunctionLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/ScalabilityLibrary"), NO_API) \
	DECLARE_SERIALIZER(UScalabilityFunctionLibrary) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UScalabilityFunctionLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UScalabilityFunctionLibrary) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UScalabilityFunctionLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UScalabilityFunctionLibrary); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UScalabilityFunctionLibrary(const UScalabilityFunctionLibrary& InCopy); \
public:


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UScalabilityFunctionLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UScalabilityFunctionLibrary(const UScalabilityFunctionLibrary& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UScalabilityFunctionLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UScalabilityFunctionLibrary); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UScalabilityFunctionLibrary)


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_59_PROLOG
#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_RPC_WRAPPERS \
	projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_INCLASS \
	projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_RPC_WRAPPERS_NO_PURE_DECLS \
	projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_INCLASS_NO_PURE_DECLS \
	projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h_62_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID projectvelorum_Plugins_ScalabilityLibrary_Source_ScalabilityLibrary_Public_ScalabilityFunctionLibrary_h


#define FOREACH_ENUM_ENAMEDSCALABILITYLEVEL(op) \
	op(ENamedScalabilityLevel::SL_LOW) \
	op(ENamedScalabilityLevel::SL_MED) \
	op(ENamedScalabilityLevel::SL_HIGH) \
	op(ENamedScalabilityLevel::SL_EPIC) \
	op(ENamedScalabilityLevel::SL_NUM) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
