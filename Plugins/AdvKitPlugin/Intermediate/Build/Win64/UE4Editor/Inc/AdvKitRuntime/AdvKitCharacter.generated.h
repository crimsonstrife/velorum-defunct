// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class UAnimMontage;
class AController;
struct FDamageEvent;
struct FVector;
class UDamageType;
class UPrimitiveComponent;
class AActor;
struct FHitResult;
class UAdvKitZoneLocation;
class AAdvKitZone;
class UAdvKitCharacterAction_Arguments;
class UAdvKitCharacterAction;
class AAdvKitUsable;
class AAdvKitInventoryItem;
class UAdvKitCharacterMovementComponent;
class AAdvKitTargetPoint;
struct FRotator;
#ifdef ADVKITRUNTIME_AdvKitCharacter_generated_h
#error "AdvKitCharacter.generated.h already included, missing '#pragma once' in AdvKitCharacter.h"
#endif
#define ADVKITRUNTIME_AdvKitCharacter_generated_h

#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_32_GENERATED_BODY \
	friend ADVKITRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FRepAdvKitAnimMontage(); \
	ADVKITRUNTIME_API static class UScriptStruct* StaticStruct();


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_17_GENERATED_BODY \
	friend ADVKITRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAdvKitInventoryConfig(); \
	ADVKITRUNTIME_API static class UScriptStruct* StaticStruct();


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_RPC_WRAPPERS \
	virtual bool PlayAnimMontageServer_Validate(UAnimMontage* , float , FName ); \
	virtual void PlayAnimMontageServer_Implementation(UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName); \
	virtual void Died_Implementation(AController* Killer, const FDamageEvent& DamageEvent, FVector HitLocation); \
	virtual bool IsAlive_Implementation(); \
	virtual float BlockPointDamage_Implementation(float DamageReceived, const UDamageType* DamageType, FVector HitLocation, FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser); \
	virtual float BlockRadialDamage_Implementation(float DamageReceived, const UDamageType* DamageType, FVector Origin, const FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser); \
	virtual float BlockAnyDamage_Implementation(float DamageReceived, const UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser); \
	virtual bool SetZoneLocationServer_Validate(UAdvKitZoneLocation* , bool ); \
	virtual void SetZoneLocationServer_Implementation(UAdvKitZoneLocation* NewLocation, bool bSnap); \
	virtual bool EnterZoneServer_Validate(AAdvKitZone* ); \
	virtual void EnterZoneServer_Implementation(AAdvKitZone* NewZone); \
	virtual bool SetZoneServer_Validate(AAdvKitZone* , bool ); \
	virtual void SetZoneServer_Implementation(AAdvKitZone* NewZone, bool bSnap); \
	virtual bool SetCameraModeServer_Validate(EAdvKitCameraType ); \
	virtual void SetCameraModeServer_Implementation(EAdvKitCameraType NewMode); \
	virtual bool SetFirstPersonEnabledServer_Validate(bool ); \
	virtual void SetFirstPersonEnabledServer_Implementation(bool bEnabled); \
	virtual bool IsDodging_Implementation() const; \
	virtual bool DodgeServer_Validate(); \
	virtual void DodgeServer_Implementation(); \
	virtual void Dodge_Implementation(); \
	virtual bool ServerUse_Validate(AAdvKitUsable* , AAdvKitInventoryItem* ); \
	virtual void ServerUse_Implementation(AAdvKitUsable* Useable, AAdvKitInventoryItem* WithItem); \
 \
	DECLARE_FUNCTION(execPlayAnimMontageServer) \
	{ \
		P_GET_OBJECT(UAnimMontage,Z_Param_AnimMontage); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InPlayRate); \
		P_GET_PROPERTY(UNameProperty,Z_Param_StartSectionName); \
		P_FINISH; \
		if (!this->PlayAnimMontageServer_Validate(Z_Param_AnimMontage,Z_Param_InPlayRate,Z_Param_StartSectionName)) \
		{ \
			RPC_ValidateFailed(TEXT("PlayAnimMontageServer_Validate")); \
			return; \
		} \
		this->PlayAnimMontageServer_Implementation(Z_Param_AnimMontage,Z_Param_InPlayRate,Z_Param_StartSectionName); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_RepAnimMontage) \
	{ \
		P_FINISH; \
		this->OnRep_RepAnimMontage(); \
	} \
 \
	DECLARE_FUNCTION(execDied) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Killer); \
		P_GET_STRUCT_REF(FDamageEvent,Z_Param_Out_DamageEvent); \
		P_GET_STRUCT(FVector,Z_Param_HitLocation); \
		P_FINISH; \
		this->Died_Implementation(Z_Param_Killer,Z_Param_Out_DamageEvent,Z_Param_HitLocation); \
	} \
 \
	DECLARE_FUNCTION(execIsAlive) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsAlive_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execBlockPointDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_DamageReceived); \
		P_GET_OBJECT(UDamageType,Z_Param_DamageType); \
		P_GET_STRUCT(FVector,Z_Param_HitLocation); \
		P_GET_STRUCT(FVector,Z_Param_HitNormal); \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_HitComponent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_STRUCT(FVector,Z_Param_ShotFromDirection); \
		P_GET_OBJECT(AController,Z_Param_InstigatedBy); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockPointDamage_Implementation(Z_Param_DamageReceived,Z_Param_DamageType,Z_Param_HitLocation,Z_Param_HitNormal,Z_Param_HitComponent,Z_Param_BoneName,Z_Param_ShotFromDirection,Z_Param_InstigatedBy,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execBlockRadialDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_DamageReceived); \
		P_GET_OBJECT(UDamageType,Z_Param_DamageType); \
		P_GET_STRUCT(FVector,Z_Param_Origin); \
		P_GET_STRUCT_REF(FHitResult,Z_Param_Out_HitInfo); \
		P_GET_OBJECT(AController,Z_Param_InstigatedBy); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockRadialDamage_Implementation(Z_Param_DamageReceived,Z_Param_DamageType,Z_Param_Origin,Z_Param_Out_HitInfo,Z_Param_InstigatedBy,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execBlockAnyDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_DamageReceived); \
		P_GET_OBJECT(UDamageType,Z_Param_DamageType); \
		P_GET_OBJECT(AController,Z_Param_InstigatedBy); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockAnyDamage_Implementation(Z_Param_DamageReceived,Z_Param_DamageType,Z_Param_InstigatedBy,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execBlockDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Damage); \
		P_GET_STRUCT_REF(FDamageEvent,Z_Param_Out_DamageEvent); \
		P_GET_OBJECT(AController,Z_Param_EventInstigator); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockDamage(Z_Param_Damage,Z_Param_Out_DamageEvent,Z_Param_EventInstigator,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execIsShoulderCam) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsShoulderCam(); \
	} \
 \
	DECLARE_FUNCTION(execIsThirdPerson) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsThirdPerson(); \
	} \
 \
	DECLARE_FUNCTION(execIsFirstPerson) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsFirstPerson(); \
	} \
 \
	DECLARE_FUNCTION(execSetMouseCursorEnabled) \
	{ \
		P_GET_UBOOL(Z_Param_bEnabled); \
		P_FINISH; \
		this->SetMouseCursorEnabled(Z_Param_bEnabled); \
	} \
 \
	DECLARE_FUNCTION(execUseClosestUseable) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->UseClosestUseable(); \
	} \
 \
	DECLARE_FUNCTION(execGetZoneLocation) \
	{ \
		P_FINISH; \
		*(UAdvKitZoneLocation**)Z_Param__Result=this->GetZoneLocation(); \
	} \
 \
	DECLARE_FUNCTION(execSetZoneLocationServer) \
	{ \
		P_GET_OBJECT(UAdvKitZoneLocation,Z_Param_NewLocation); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		if (!this->SetZoneLocationServer_Validate(Z_Param_NewLocation,Z_Param_bSnap)) \
		{ \
			RPC_ValidateFailed(TEXT("SetZoneLocationServer_Validate")); \
			return; \
		} \
		this->SetZoneLocationServer_Implementation(Z_Param_NewLocation,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execSetZoneLocation) \
	{ \
		P_GET_OBJECT(UAdvKitZoneLocation,Z_Param_NewLocation); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		this->SetZoneLocation(Z_Param_NewLocation,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execGetZone) \
	{ \
		P_FINISH; \
		*(AAdvKitZone**)Z_Param__Result=this->GetZone(); \
	} \
 \
	DECLARE_FUNCTION(execEnterZoneServer) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_NewZone); \
		P_FINISH; \
		if (!this->EnterZoneServer_Validate(Z_Param_NewZone)) \
		{ \
			RPC_ValidateFailed(TEXT("EnterZoneServer_Validate")); \
			return; \
		} \
		this->EnterZoneServer_Implementation(Z_Param_NewZone); \
	} \
 \
	DECLARE_FUNCTION(execEnterZone) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_Zone); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->EnterZone(Z_Param_Zone); \
	} \
 \
	DECLARE_FUNCTION(execCanEnterZone) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_Zone); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->CanEnterZone(Z_Param_Zone); \
	} \
 \
	DECLARE_FUNCTION(execSetZoneServer) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_NewZone); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		if (!this->SetZoneServer_Validate(Z_Param_NewZone,Z_Param_bSnap)) \
		{ \
			RPC_ValidateFailed(TEXT("SetZoneServer_Validate")); \
			return; \
		} \
		this->SetZoneServer_Implementation(Z_Param_NewZone,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execSetZone) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_NewZone); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		this->SetZone(Z_Param_NewZone,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execGetCameraMode) \
	{ \
		P_FINISH; \
		*(TEnumAsByte<EAdvKitCameraType>*)Z_Param__Result=this->GetCameraMode(); \
	} \
 \
	DECLARE_FUNCTION(execSetCameraModeServer) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewMode); \
		P_FINISH; \
		if (!this->SetCameraModeServer_Validate(EAdvKitCameraType(Z_Param_NewMode))) \
		{ \
			RPC_ValidateFailed(TEXT("SetCameraModeServer_Validate")); \
			return; \
		} \
		this->SetCameraModeServer_Implementation(EAdvKitCameraType(Z_Param_NewMode)); \
	} \
 \
	DECLARE_FUNCTION(execSetCameraMode) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewMode); \
		P_FINISH; \
		this->SetCameraMode(EAdvKitCameraType(Z_Param_NewMode)); \
	} \
 \
	DECLARE_FUNCTION(execSetFirstPersonEnabledServer) \
	{ \
		P_GET_UBOOL(Z_Param_bEnabled); \
		P_FINISH; \
		if (!this->SetFirstPersonEnabledServer_Validate(Z_Param_bEnabled)) \
		{ \
			RPC_ValidateFailed(TEXT("SetFirstPersonEnabledServer_Validate")); \
			return; \
		} \
		this->SetFirstPersonEnabledServer_Implementation(Z_Param_bEnabled); \
	} \
 \
	DECLARE_FUNCTION(execNextCamera) \
	{ \
		P_FINISH; \
		this->NextCamera(); \
	} \
 \
	DECLARE_FUNCTION(execIsDodging) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsDodging_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execDodgeServer) \
	{ \
		P_FINISH; \
		if (!this->DodgeServer_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("DodgeServer_Validate")); \
			return; \
		} \
		this->DodgeServer_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execDodge) \
	{ \
		P_FINISH; \
		this->Dodge_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execStopFire) \
	{ \
		P_FINISH; \
		this->StopFire(); \
	} \
 \
	DECLARE_FUNCTION(execStartFire) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_FireMode); \
		P_FINISH; \
		this->StartFire(Z_Param_FireMode); \
	} \
 \
	DECLARE_FUNCTION(execReload) \
	{ \
		P_FINISH; \
		this->Reload(); \
	} \
 \
	DECLARE_FUNCTION(execStartTransitionActionTo) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewMode); \
		P_GET_OBJECT(UAdvKitCharacterAction_Arguments,Z_Param_Arguments); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->StartTransitionActionTo(EAdvKitMovementMode(Z_Param_NewMode),Z_Param_Arguments); \
	} \
 \
	DECLARE_FUNCTION(execStartAction) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_ActionClass); \
		P_GET_OBJECT(UAdvKitCharacterAction_Arguments,Z_Param_Arguments); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->StartAction(Z_Param_ActionClass,Z_Param_Arguments); \
	} \
 \
	DECLARE_FUNCTION(execServerUse) \
	{ \
		P_GET_OBJECT(AAdvKitUsable,Z_Param_Useable); \
		P_GET_OBJECT(AAdvKitInventoryItem,Z_Param_WithItem); \
		P_FINISH; \
		if (!this->ServerUse_Validate(Z_Param_Useable,Z_Param_WithItem)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerUse_Validate")); \
			return; \
		} \
		this->ServerUse_Implementation(Z_Param_Useable,Z_Param_WithItem); \
	} \
 \
	DECLARE_FUNCTION(execUse) \
	{ \
		P_GET_OBJECT(AAdvKitUsable,Z_Param_Usable); \
		P_GET_OBJECT(AAdvKitInventoryItem,Z_Param_WithItem); \
		P_FINISH; \
		this->Use(Z_Param_Usable,Z_Param_WithItem); \
	} \
 \
	DECLARE_FUNCTION(execAddConditionalMovementInput) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_WorldDirection); \
		P_GET_STRUCT(FVector,Z_Param_LocalDirection); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_ScaleValue); \
		P_GET_UBOOL(Z_Param_bForce); \
		P_FINISH; \
		this->AddConditionalMovementInput(Z_Param_WorldDirection,Z_Param_LocalDirection,Z_Param_ScaleValue,Z_Param_bForce); \
	} \
 \
	DECLARE_FUNCTION(execGetAdvMovementComponent) \
	{ \
		P_FINISH; \
		*(UAdvKitCharacterMovementComponent**)Z_Param__Result=this->GetAdvMovementComponent(); \
	} \
 \
	DECLARE_FUNCTION(execSetTarget) \
	{ \
		P_GET_OBJECT(AAdvKitTargetPoint,Z_Param_NewTarget); \
		P_GET_UBOOL(Z_Param_bLock); \
		P_FINISH; \
		this->SetTarget(Z_Param_NewTarget,Z_Param_bLock); \
	} \
 \
	DECLARE_FUNCTION(execGetAllAvailableTargets) \
	{ \
		P_FINISH; \
		*(TArray<AAdvKitTargetPoint*>*)Z_Param__Result=this->GetAllAvailableTargets(); \
	} \
 \
	DECLARE_FUNCTION(execGetAimOffsets) \
	{ \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetAimOffsets(); \
	} \
 \
	DECLARE_FUNCTION(execPreviousItem) \
	{ \
		P_FINISH; \
		this->PreviousItem(); \
	} \
 \
	DECLARE_FUNCTION(execNextItem) \
	{ \
		P_FINISH; \
		this->NextItem(); \
	} \
 \
	DECLARE_FUNCTION(execGetActiveAction) \
	{ \
		P_FINISH; \
		*(UAdvKitCharacterAction**)Z_Param__Result=this->GetActiveAction(); \
	}


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_RPC_WRAPPERS_NO_PURE_DECLS \
	virtual bool PlayAnimMontageServer_Validate(UAnimMontage* , float , FName ); \
	virtual bool SetZoneLocationServer_Validate(UAdvKitZoneLocation* , bool ); \
	virtual bool EnterZoneServer_Validate(AAdvKitZone* ); \
	virtual bool SetZoneServer_Validate(AAdvKitZone* , bool ); \
	virtual bool SetCameraModeServer_Validate(EAdvKitCameraType ); \
	virtual bool SetFirstPersonEnabledServer_Validate(bool ); \
	virtual bool DodgeServer_Validate(); \
	virtual bool ServerUse_Validate(AAdvKitUsable* , AAdvKitInventoryItem* ); \
 \
	DECLARE_FUNCTION(execPlayAnimMontageServer) \
	{ \
		P_GET_OBJECT(UAnimMontage,Z_Param_AnimMontage); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_InPlayRate); \
		P_GET_PROPERTY(UNameProperty,Z_Param_StartSectionName); \
		P_FINISH; \
		if (!this->PlayAnimMontageServer_Validate(Z_Param_AnimMontage,Z_Param_InPlayRate,Z_Param_StartSectionName)) \
		{ \
			RPC_ValidateFailed(TEXT("PlayAnimMontageServer_Validate")); \
			return; \
		} \
		this->PlayAnimMontageServer_Implementation(Z_Param_AnimMontage,Z_Param_InPlayRate,Z_Param_StartSectionName); \
	} \
 \
	DECLARE_FUNCTION(execOnRep_RepAnimMontage) \
	{ \
		P_FINISH; \
		this->OnRep_RepAnimMontage(); \
	} \
 \
	DECLARE_FUNCTION(execDied) \
	{ \
		P_GET_OBJECT(AController,Z_Param_Killer); \
		P_GET_STRUCT_REF(FDamageEvent,Z_Param_Out_DamageEvent); \
		P_GET_STRUCT(FVector,Z_Param_HitLocation); \
		P_FINISH; \
		this->Died_Implementation(Z_Param_Killer,Z_Param_Out_DamageEvent,Z_Param_HitLocation); \
	} \
 \
	DECLARE_FUNCTION(execIsAlive) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsAlive_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execBlockPointDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_DamageReceived); \
		P_GET_OBJECT(UDamageType,Z_Param_DamageType); \
		P_GET_STRUCT(FVector,Z_Param_HitLocation); \
		P_GET_STRUCT(FVector,Z_Param_HitNormal); \
		P_GET_OBJECT(UPrimitiveComponent,Z_Param_HitComponent); \
		P_GET_PROPERTY(UNameProperty,Z_Param_BoneName); \
		P_GET_STRUCT(FVector,Z_Param_ShotFromDirection); \
		P_GET_OBJECT(AController,Z_Param_InstigatedBy); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockPointDamage_Implementation(Z_Param_DamageReceived,Z_Param_DamageType,Z_Param_HitLocation,Z_Param_HitNormal,Z_Param_HitComponent,Z_Param_BoneName,Z_Param_ShotFromDirection,Z_Param_InstigatedBy,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execBlockRadialDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_DamageReceived); \
		P_GET_OBJECT(UDamageType,Z_Param_DamageType); \
		P_GET_STRUCT(FVector,Z_Param_Origin); \
		P_GET_STRUCT_REF(FHitResult,Z_Param_Out_HitInfo); \
		P_GET_OBJECT(AController,Z_Param_InstigatedBy); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockRadialDamage_Implementation(Z_Param_DamageReceived,Z_Param_DamageType,Z_Param_Origin,Z_Param_Out_HitInfo,Z_Param_InstigatedBy,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execBlockAnyDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_DamageReceived); \
		P_GET_OBJECT(UDamageType,Z_Param_DamageType); \
		P_GET_OBJECT(AController,Z_Param_InstigatedBy); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockAnyDamage_Implementation(Z_Param_DamageReceived,Z_Param_DamageType,Z_Param_InstigatedBy,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execBlockDamage) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_Damage); \
		P_GET_STRUCT_REF(FDamageEvent,Z_Param_Out_DamageEvent); \
		P_GET_OBJECT(AController,Z_Param_EventInstigator); \
		P_GET_OBJECT(AActor,Z_Param_DamageCauser); \
		P_FINISH; \
		*(float*)Z_Param__Result=this->BlockDamage(Z_Param_Damage,Z_Param_Out_DamageEvent,Z_Param_EventInstigator,Z_Param_DamageCauser); \
	} \
 \
	DECLARE_FUNCTION(execIsShoulderCam) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsShoulderCam(); \
	} \
 \
	DECLARE_FUNCTION(execIsThirdPerson) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsThirdPerson(); \
	} \
 \
	DECLARE_FUNCTION(execIsFirstPerson) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsFirstPerson(); \
	} \
 \
	DECLARE_FUNCTION(execSetMouseCursorEnabled) \
	{ \
		P_GET_UBOOL(Z_Param_bEnabled); \
		P_FINISH; \
		this->SetMouseCursorEnabled(Z_Param_bEnabled); \
	} \
 \
	DECLARE_FUNCTION(execUseClosestUseable) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->UseClosestUseable(); \
	} \
 \
	DECLARE_FUNCTION(execGetZoneLocation) \
	{ \
		P_FINISH; \
		*(UAdvKitZoneLocation**)Z_Param__Result=this->GetZoneLocation(); \
	} \
 \
	DECLARE_FUNCTION(execSetZoneLocationServer) \
	{ \
		P_GET_OBJECT(UAdvKitZoneLocation,Z_Param_NewLocation); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		if (!this->SetZoneLocationServer_Validate(Z_Param_NewLocation,Z_Param_bSnap)) \
		{ \
			RPC_ValidateFailed(TEXT("SetZoneLocationServer_Validate")); \
			return; \
		} \
		this->SetZoneLocationServer_Implementation(Z_Param_NewLocation,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execSetZoneLocation) \
	{ \
		P_GET_OBJECT(UAdvKitZoneLocation,Z_Param_NewLocation); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		this->SetZoneLocation(Z_Param_NewLocation,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execGetZone) \
	{ \
		P_FINISH; \
		*(AAdvKitZone**)Z_Param__Result=this->GetZone(); \
	} \
 \
	DECLARE_FUNCTION(execEnterZoneServer) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_NewZone); \
		P_FINISH; \
		if (!this->EnterZoneServer_Validate(Z_Param_NewZone)) \
		{ \
			RPC_ValidateFailed(TEXT("EnterZoneServer_Validate")); \
			return; \
		} \
		this->EnterZoneServer_Implementation(Z_Param_NewZone); \
	} \
 \
	DECLARE_FUNCTION(execEnterZone) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_Zone); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->EnterZone(Z_Param_Zone); \
	} \
 \
	DECLARE_FUNCTION(execCanEnterZone) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_Zone); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->CanEnterZone(Z_Param_Zone); \
	} \
 \
	DECLARE_FUNCTION(execSetZoneServer) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_NewZone); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		if (!this->SetZoneServer_Validate(Z_Param_NewZone,Z_Param_bSnap)) \
		{ \
			RPC_ValidateFailed(TEXT("SetZoneServer_Validate")); \
			return; \
		} \
		this->SetZoneServer_Implementation(Z_Param_NewZone,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execSetZone) \
	{ \
		P_GET_OBJECT(AAdvKitZone,Z_Param_NewZone); \
		P_GET_UBOOL(Z_Param_bSnap); \
		P_FINISH; \
		this->SetZone(Z_Param_NewZone,Z_Param_bSnap); \
	} \
 \
	DECLARE_FUNCTION(execGetCameraMode) \
	{ \
		P_FINISH; \
		*(TEnumAsByte<EAdvKitCameraType>*)Z_Param__Result=this->GetCameraMode(); \
	} \
 \
	DECLARE_FUNCTION(execSetCameraModeServer) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewMode); \
		P_FINISH; \
		if (!this->SetCameraModeServer_Validate(EAdvKitCameraType(Z_Param_NewMode))) \
		{ \
			RPC_ValidateFailed(TEXT("SetCameraModeServer_Validate")); \
			return; \
		} \
		this->SetCameraModeServer_Implementation(EAdvKitCameraType(Z_Param_NewMode)); \
	} \
 \
	DECLARE_FUNCTION(execSetCameraMode) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewMode); \
		P_FINISH; \
		this->SetCameraMode(EAdvKitCameraType(Z_Param_NewMode)); \
	} \
 \
	DECLARE_FUNCTION(execSetFirstPersonEnabledServer) \
	{ \
		P_GET_UBOOL(Z_Param_bEnabled); \
		P_FINISH; \
		if (!this->SetFirstPersonEnabledServer_Validate(Z_Param_bEnabled)) \
		{ \
			RPC_ValidateFailed(TEXT("SetFirstPersonEnabledServer_Validate")); \
			return; \
		} \
		this->SetFirstPersonEnabledServer_Implementation(Z_Param_bEnabled); \
	} \
 \
	DECLARE_FUNCTION(execNextCamera) \
	{ \
		P_FINISH; \
		this->NextCamera(); \
	} \
 \
	DECLARE_FUNCTION(execIsDodging) \
	{ \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->IsDodging_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execDodgeServer) \
	{ \
		P_FINISH; \
		if (!this->DodgeServer_Validate()) \
		{ \
			RPC_ValidateFailed(TEXT("DodgeServer_Validate")); \
			return; \
		} \
		this->DodgeServer_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execDodge) \
	{ \
		P_FINISH; \
		this->Dodge_Implementation(); \
	} \
 \
	DECLARE_FUNCTION(execStopFire) \
	{ \
		P_FINISH; \
		this->StopFire(); \
	} \
 \
	DECLARE_FUNCTION(execStartFire) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_FireMode); \
		P_FINISH; \
		this->StartFire(Z_Param_FireMode); \
	} \
 \
	DECLARE_FUNCTION(execReload) \
	{ \
		P_FINISH; \
		this->Reload(); \
	} \
 \
	DECLARE_FUNCTION(execStartTransitionActionTo) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_NewMode); \
		P_GET_OBJECT(UAdvKitCharacterAction_Arguments,Z_Param_Arguments); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->StartTransitionActionTo(EAdvKitMovementMode(Z_Param_NewMode),Z_Param_Arguments); \
	} \
 \
	DECLARE_FUNCTION(execStartAction) \
	{ \
		P_GET_OBJECT(UClass,Z_Param_ActionClass); \
		P_GET_OBJECT(UAdvKitCharacterAction_Arguments,Z_Param_Arguments); \
		P_FINISH; \
		*(bool*)Z_Param__Result=this->StartAction(Z_Param_ActionClass,Z_Param_Arguments); \
	} \
 \
	DECLARE_FUNCTION(execServerUse) \
	{ \
		P_GET_OBJECT(AAdvKitUsable,Z_Param_Useable); \
		P_GET_OBJECT(AAdvKitInventoryItem,Z_Param_WithItem); \
		P_FINISH; \
		if (!this->ServerUse_Validate(Z_Param_Useable,Z_Param_WithItem)) \
		{ \
			RPC_ValidateFailed(TEXT("ServerUse_Validate")); \
			return; \
		} \
		this->ServerUse_Implementation(Z_Param_Useable,Z_Param_WithItem); \
	} \
 \
	DECLARE_FUNCTION(execUse) \
	{ \
		P_GET_OBJECT(AAdvKitUsable,Z_Param_Usable); \
		P_GET_OBJECT(AAdvKitInventoryItem,Z_Param_WithItem); \
		P_FINISH; \
		this->Use(Z_Param_Usable,Z_Param_WithItem); \
	} \
 \
	DECLARE_FUNCTION(execAddConditionalMovementInput) \
	{ \
		P_GET_STRUCT(FVector,Z_Param_WorldDirection); \
		P_GET_STRUCT(FVector,Z_Param_LocalDirection); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_ScaleValue); \
		P_GET_UBOOL(Z_Param_bForce); \
		P_FINISH; \
		this->AddConditionalMovementInput(Z_Param_WorldDirection,Z_Param_LocalDirection,Z_Param_ScaleValue,Z_Param_bForce); \
	} \
 \
	DECLARE_FUNCTION(execGetAdvMovementComponent) \
	{ \
		P_FINISH; \
		*(UAdvKitCharacterMovementComponent**)Z_Param__Result=this->GetAdvMovementComponent(); \
	} \
 \
	DECLARE_FUNCTION(execSetTarget) \
	{ \
		P_GET_OBJECT(AAdvKitTargetPoint,Z_Param_NewTarget); \
		P_GET_UBOOL(Z_Param_bLock); \
		P_FINISH; \
		this->SetTarget(Z_Param_NewTarget,Z_Param_bLock); \
	} \
 \
	DECLARE_FUNCTION(execGetAllAvailableTargets) \
	{ \
		P_FINISH; \
		*(TArray<AAdvKitTargetPoint*>*)Z_Param__Result=this->GetAllAvailableTargets(); \
	} \
 \
	DECLARE_FUNCTION(execGetAimOffsets) \
	{ \
		P_FINISH; \
		*(FRotator*)Z_Param__Result=this->GetAimOffsets(); \
	} \
 \
	DECLARE_FUNCTION(execPreviousItem) \
	{ \
		P_FINISH; \
		this->PreviousItem(); \
	} \
 \
	DECLARE_FUNCTION(execNextItem) \
	{ \
		P_FINISH; \
		this->NextItem(); \
	} \
 \
	DECLARE_FUNCTION(execGetActiveAction) \
	{ \
		P_FINISH; \
		*(UAdvKitCharacterAction**)Z_Param__Result=this->GetActiveAction(); \
	}


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_EVENT_PARMS \
	struct AdvKitCharacter_eventBlockAnyDamage_Parms \
	{ \
		float DamageReceived; \
		const UDamageType* DamageType; \
		AController* InstigatedBy; \
		AActor* DamageCauser; \
		float ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		AdvKitCharacter_eventBlockAnyDamage_Parms() \
			: ReturnValue(0) \
		{ \
		} \
	}; \
	struct AdvKitCharacter_eventBlockPointDamage_Parms \
	{ \
		float DamageReceived; \
		const UDamageType* DamageType; \
		FVector HitLocation; \
		FVector HitNormal; \
		UPrimitiveComponent* HitComponent; \
		FName BoneName; \
		FVector ShotFromDirection; \
		AController* InstigatedBy; \
		AActor* DamageCauser; \
		float ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		AdvKitCharacter_eventBlockPointDamage_Parms() \
			: ReturnValue(0) \
		{ \
		} \
	}; \
	struct AdvKitCharacter_eventBlockRadialDamage_Parms \
	{ \
		float DamageReceived; \
		const UDamageType* DamageType; \
		FVector Origin; \
		FHitResult HitInfo; \
		AController* InstigatedBy; \
		AActor* DamageCauser; \
		float ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		AdvKitCharacter_eventBlockRadialDamage_Parms() \
			: ReturnValue(0) \
		{ \
		} \
	}; \
	struct AdvKitCharacter_eventDied_Parms \
	{ \
		AController* Killer; \
		FDamageEvent DamageEvent; \
		FVector HitLocation; \
	}; \
	struct AdvKitCharacter_eventEnterZoneServer_Parms \
	{ \
		AAdvKitZone* NewZone; \
	}; \
	struct AdvKitCharacter_eventIsAlive_Parms \
	{ \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		AdvKitCharacter_eventIsAlive_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct AdvKitCharacter_eventIsDodging_Parms \
	{ \
		bool ReturnValue; \
 \
		/** Constructor, intializes return property only **/ \
		AdvKitCharacter_eventIsDodging_Parms() \
			: ReturnValue(false) \
		{ \
		} \
	}; \
	struct AdvKitCharacter_eventPlayAnimMontageServer_Parms \
	{ \
		UAnimMontage* AnimMontage; \
		float InPlayRate; \
		FName StartSectionName; \
	}; \
	struct AdvKitCharacter_eventServerUse_Parms \
	{ \
		AAdvKitUsable* Useable; \
		AAdvKitInventoryItem* WithItem; \
	}; \
	struct AdvKitCharacter_eventSetCameraModeServer_Parms \
	{ \
		TEnumAsByte<EAdvKitCameraType> NewMode; \
	}; \
	struct AdvKitCharacter_eventSetFirstPersonEnabledServer_Parms \
	{ \
		bool bEnabled; \
	}; \
	struct AdvKitCharacter_eventSetZoneLocationServer_Parms \
	{ \
		UAdvKitZoneLocation* NewLocation; \
		bool bSnap; \
	}; \
	struct AdvKitCharacter_eventSetZoneServer_Parms \
	{ \
		AAdvKitZone* NewZone; \
		bool bSnap; \
	};


extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_BlockAnyDamage;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_BlockPointDamage;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_BlockRadialDamage;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_Died;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_Dodge;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_DodgeServer;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_EnterZoneServer;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_IsAlive;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_IsDodging;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_PlayAnimMontageServer;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_ServerUse;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_SetCameraModeServer;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_SetFirstPersonEnabledServer;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_SetZoneLocationServer;
extern ADVKITRUNTIME_API  FName ADVKITRUNTIME_SetZoneServer;
#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_CALLBACK_WRAPPERS
#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesAAdvKitCharacter(); \
	friend ADVKITRUNTIME_API class UClass* Z_Construct_UClass_AAdvKitCharacter(); \
	public: \
	DECLARE_CLASS(AAdvKitCharacter, ACharacter, COMPILED_IN_FLAGS(CLASS_Abstract), 0, TEXT("/Script/AdvKitRuntime"), NO_API) \
	DECLARE_SERIALIZER(AAdvKitCharacter) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_INCLASS \
	private: \
	static void StaticRegisterNativesAAdvKitCharacter(); \
	friend ADVKITRUNTIME_API class UClass* Z_Construct_UClass_AAdvKitCharacter(); \
	public: \
	DECLARE_CLASS(AAdvKitCharacter, ACharacter, COMPILED_IN_FLAGS(CLASS_Abstract), 0, TEXT("/Script/AdvKitRuntime"), NO_API) \
	DECLARE_SERIALIZER(AAdvKitCharacter) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API AAdvKitCharacter(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(AAdvKitCharacter) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, AAdvKitCharacter); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(AAdvKitCharacter); \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API AAdvKitCharacter(const AAdvKitCharacter& InCopy); \
public:


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_ENHANCED_CONSTRUCTORS \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API AAdvKitCharacter(const AAdvKitCharacter& InCopy); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, AAdvKitCharacter); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(AAdvKitCharacter); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(AAdvKitCharacter)


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_85_PROLOG \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_EVENT_PARMS


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_RPC_WRAPPERS \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_CALLBACK_WRAPPERS \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_INCLASS \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_RPC_WRAPPERS_NO_PURE_DECLS \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_CALLBACK_WRAPPERS \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_INCLASS_NO_PURE_DECLS \
	projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h_88_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID projectvelorum_Plugins_AdvKitPlugin_Source_AdvKitRuntime_Classes_Player_AdvKitCharacter_h


#define FOREACH_ENUM_EADVKITCAMERATYPE(op) \
	op(EAdvKitCameraType::FirstPerson) \
	op(EAdvKitCameraType::ThirdPerson) \
	op(EAdvKitCameraType::Shoulder) \
	op(EAdvKitCameraType::TargetLocked) \
	op(EAdvKitCameraType::Unkown) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
